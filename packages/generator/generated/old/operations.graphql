query Application($where: ApplicationWhereUniqueInput!) {
  application(where: $where) {
    ...Application
  }
}

query Applications($where: ApplicationWhereInput, $orderBy: ApplicationOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  applications(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...Application
  }
}

query ApplicationsConnection($where: ApplicationWhereInput, $orderBy: ApplicationOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  applicationsConnection(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...ApplicationConnection
  }
}

query Candidate($where: CandidateWhereUniqueInput!) {
  candidate(where: $where) {
    ...Candidate
  }
}

query Candidates($where: CandidateWhereInput, $orderBy: CandidateOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  candidates(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...Candidate
  }
}

query CandidatesConnection($where: CandidateWhereInput, $orderBy: CandidateOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  candidatesConnection(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...CandidateConnection
  }
}

query Job($where: JobWhereUniqueInput!) {
  job(where: $where) {
    ...Job
  }
}

query Jobs($where: JobWhereInput, $orderBy: JobOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  jobs(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...Job
  }
}

query JobsConnection($where: JobWhereInput, $orderBy: JobOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  jobsConnection(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...JobConnection
  }
}

query Source($where: SourceWhereUniqueInput!) {
  source(where: $where) {
    ...Source
  }
}

query Sources($where: SourceWhereInput, $orderBy: SourceOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  sources(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...Source
  }
}

query SourcesConnection($where: SourceWhereInput, $orderBy: SourceOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  sourcesConnection(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...SourceConnection
  }
}

query Tag($where: TagWhereUniqueInput!) {
  tag(where: $where) {
    ...Tag
  }
}

query Tags($where: TagWhereInput, $orderBy: TagOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  tags(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...Tag
  }
}

query TagsConnection($where: TagWhereInput, $orderBy: TagOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  tagsConnection(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...TagConnection
  }
}

query Task($where: TaskWhereUniqueInput!) {
  task(where: $where) {
    ...Task
  }
}

query Tasks($where: TaskWhereInput, $orderBy: TaskOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  tasks(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...Task
  }
}

query TasksConnection($where: TaskWhereInput, $orderBy: TaskOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  tasksConnection(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...TaskConnection
  }
}

query User($where: UserWhereUniqueInput!) {
  user(where: $where) {
    ...User
  }
}

query Users($where: UserWhereInput, $orderBy: UserOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  users(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...User
  }
}

query UsersConnection($where: UserWhereInput, $orderBy: UserOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  usersConnection(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...UserConnection
  }
}

query Workflow($where: WorkflowWhereUniqueInput!) {
  workflow(where: $where) {
    ...Workflow
  }
}

query Workflows($where: WorkflowWhereInput, $orderBy: WorkflowOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  workflows(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...Workflow
  }
}

query WorkflowsConnection($where: WorkflowWhereInput, $orderBy: WorkflowOrderByInput, $skip: Int, $after: String, $before: String, $first: Int, $last: Int) {
  workflowsConnection(where: $where, orderBy: $orderBy, skip: $skip, after: $after, before: $before, first: $first, last: $last) {
    ...WorkflowConnection
  }
}

mutation CreateApplication($data: ApplicationCreateInput!) {
  createApplication(data: $data) {
    ...Application
  }
}

mutation UpdateApplication($data: ApplicationUpdateInput!, $where: ApplicationWhereUniqueInput!) {
  updateApplication(data: $data, where: $where) {
    ...Application
  }
}

mutation UpdateManyApplications($data: ApplicationUpdateManyMutationInput!, $where: ApplicationWhereInput) {
  updateManyApplications(data: $data, where: $where) {
    ...BatchPayload
  }
}

mutation UpsertApplication($where: ApplicationWhereUniqueInput!, $create: ApplicationCreateInput!, $update: ApplicationUpdateInput!) {
  upsertApplication(where: $where, create: $create, update: $update) {
    ...Application
  }
}

mutation DeleteApplication($where: ApplicationWhereUniqueInput!) {
  deleteApplication(where: $where) {
    ...Application
  }
}

mutation DeleteManyApplications($where: ApplicationWhereInput) {
  deleteManyApplications(where: $where) {
    ...BatchPayload
  }
}

mutation CreateCandidate($data: CandidateCreateInput!) {
  createCandidate(data: $data) {
    ...Candidate
  }
}

mutation UpdateCandidate($data: CandidateUpdateInput!, $where: CandidateWhereUniqueInput!) {
  updateCandidate(data: $data, where: $where) {
    ...Candidate
  }
}

mutation UpdateManyCandidates($data: CandidateUpdateManyMutationInput!, $where: CandidateWhereInput) {
  updateManyCandidates(data: $data, where: $where) {
    ...BatchPayload
  }
}

mutation UpsertCandidate($where: CandidateWhereUniqueInput!, $create: CandidateCreateInput!, $update: CandidateUpdateInput!) {
  upsertCandidate(where: $where, create: $create, update: $update) {
    ...Candidate
  }
}

mutation DeleteCandidate($where: CandidateWhereUniqueInput!) {
  deleteCandidate(where: $where) {
    ...Candidate
  }
}

mutation DeleteManyCandidates($where: CandidateWhereInput) {
  deleteManyCandidates(where: $where) {
    ...BatchPayload
  }
}

mutation CreateJob($data: JobCreateInput!) {
  createJob(data: $data) {
    ...Job
  }
}

mutation UpdateJob($data: JobUpdateInput!, $where: JobWhereUniqueInput!) {
  updateJob(data: $data, where: $where) {
    ...Job
  }
}

mutation UpdateManyJobs($data: JobUpdateManyMutationInput!, $where: JobWhereInput) {
  updateManyJobs(data: $data, where: $where) {
    ...BatchPayload
  }
}

mutation UpsertJob($where: JobWhereUniqueInput!, $create: JobCreateInput!, $update: JobUpdateInput!) {
  upsertJob(where: $where, create: $create, update: $update) {
    ...Job
  }
}

mutation DeleteJob($where: JobWhereUniqueInput!) {
  deleteJob(where: $where) {
    ...Job
  }
}

mutation DeleteManyJobs($where: JobWhereInput) {
  deleteManyJobs(where: $where) {
    ...BatchPayload
  }
}

mutation CreateSource($data: SourceCreateInput!) {
  createSource(data: $data) {
    ...Source
  }
}

mutation UpdateSource($data: SourceUpdateInput!, $where: SourceWhereUniqueInput!) {
  updateSource(data: $data, where: $where) {
    ...Source
  }
}

mutation UpdateManySources($data: SourceUpdateManyMutationInput!, $where: SourceWhereInput) {
  updateManySources(data: $data, where: $where) {
    ...BatchPayload
  }
}

mutation UpsertSource($where: SourceWhereUniqueInput!, $create: SourceCreateInput!, $update: SourceUpdateInput!) {
  upsertSource(where: $where, create: $create, update: $update) {
    ...Source
  }
}

mutation DeleteSource($where: SourceWhereUniqueInput!) {
  deleteSource(where: $where) {
    ...Source
  }
}

mutation DeleteManySources($where: SourceWhereInput) {
  deleteManySources(where: $where) {
    ...BatchPayload
  }
}

mutation CreateTag($data: TagCreateInput!) {
  createTag(data: $data) {
    ...Tag
  }
}

mutation UpdateTag($data: TagUpdateInput!, $where: TagWhereUniqueInput!) {
  updateTag(data: $data, where: $where) {
    ...Tag
  }
}

mutation UpdateManyTags($data: TagUpdateManyMutationInput!, $where: TagWhereInput) {
  updateManyTags(data: $data, where: $where) {
    ...BatchPayload
  }
}

mutation UpsertTag($where: TagWhereUniqueInput!, $create: TagCreateInput!, $update: TagUpdateInput!) {
  upsertTag(where: $where, create: $create, update: $update) {
    ...Tag
  }
}

mutation DeleteTag($where: TagWhereUniqueInput!) {
  deleteTag(where: $where) {
    ...Tag
  }
}

mutation DeleteManyTags($where: TagWhereInput) {
  deleteManyTags(where: $where) {
    ...BatchPayload
  }
}

mutation CreateTask($data: TaskCreateInput!) {
  createTask(data: $data) {
    ...Task
  }
}

mutation UpdateTask($data: TaskUpdateInput!, $where: TaskWhereUniqueInput!) {
  updateTask(data: $data, where: $where) {
    ...Task
  }
}

mutation UpdateManyTasks($data: TaskUpdateManyMutationInput!, $where: TaskWhereInput) {
  updateManyTasks(data: $data, where: $where) {
    ...BatchPayload
  }
}

mutation UpsertTask($where: TaskWhereUniqueInput!, $create: TaskCreateInput!, $update: TaskUpdateInput!) {
  upsertTask(where: $where, create: $create, update: $update) {
    ...Task
  }
}

mutation DeleteTask($where: TaskWhereUniqueInput!) {
  deleteTask(where: $where) {
    ...Task
  }
}

mutation DeleteManyTasks($where: TaskWhereInput) {
  deleteManyTasks(where: $where) {
    ...BatchPayload
  }
}

mutation UpdateUser($data: UserUpdateInput!, $where: UserWhereUniqueInput!) {
  updateUser(data: $data, where: $where) {
    ...User
  }
}

mutation CreateWorkflow($data: WorkflowCreateInput!) {
  createWorkflow(data: $data) {
    ...Workflow
  }
}

mutation UpdateWorkflow($data: WorkflowUpdateInput!, $where: WorkflowWhereUniqueInput!) {
  updateWorkflow(data: $data, where: $where) {
    ...Workflow
  }
}

mutation UpdateManyWorkflows($data: WorkflowUpdateManyMutationInput!, $where: WorkflowWhereInput) {
  updateManyWorkflows(data: $data, where: $where) {
    ...BatchPayload
  }
}

mutation UpsertWorkflow($where: WorkflowWhereUniqueInput!, $create: WorkflowCreateInput!, $update: WorkflowUpdateInput!) {
  upsertWorkflow(where: $where, create: $create, update: $update) {
    ...Workflow
  }
}

mutation DeleteWorkflow($where: WorkflowWhereUniqueInput!) {
  deleteWorkflow(where: $where) {
    ...Workflow
  }
}

mutation DeleteManyWorkflows($where: WorkflowWhereInput) {
  deleteManyWorkflows(where: $where) {
    ...BatchPayload
  }
}
