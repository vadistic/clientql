/*
 *
 * Code generated by clientql generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run generator to update it.
 * For more information check: https"//github.com/vadistic/clientql
 *
 */

import {
  ApplicationCreateInput,
  ApplicationCreateManyWithoutCandidateInput,
  ApplicationCreateManyWithoutJobInput,
  ApplicationCreateWithoutCandidateInput,
  ApplicationCreateWithoutJobInput,
  ApplicationScalarWhereInput,
  ApplicationUpdateInput,
  ApplicationUpdateManyDataInput,
  ApplicationUpdateManyMutationInput,
  ApplicationUpdateManyWithoutCandidateInput,
  ApplicationUpdateManyWithoutJobInput,
  ApplicationUpdateManyWithWhereNestedInput,
  ApplicationUpdateWithoutCandidateDataInput,
  ApplicationUpdateWithoutJobDataInput,
  ApplicationUpdateWithWhereUniqueWithoutCandidateInput,
  ApplicationUpdateWithWhereUniqueWithoutJobInput,
  ApplicationUpsertWithWhereUniqueWithoutCandidateInput,
  ApplicationUpsertWithWhereUniqueWithoutJobInput,
  ApplicationWhereInput,
  ApplicationWhereUniqueInput,
  CandidateCreatecoverLettersStringInput,
  CandidateCreateemailsInput,
  CandidateCreateInput,
  CandidateCreatelinksInput,
  CandidateCreateManyInput,
  CandidateCreateOneWithoutApplicationsInput,
  CandidateCreateOneWithoutTasksInput,
  CandidateCreatephonesInput,
  CandidateCreateresumesStringInput,
  CandidateCreateWithoutApplicationsInput,
  CandidateCreateWithoutTasksInput,
  CandidateScalarWhereInput,
  CandidateUpdatecoverLettersStringInput,
  CandidateUpdateDataInput,
  CandidateUpdateemailsInput,
  CandidateUpdateInput,
  CandidateUpdatelinksInput,
  CandidateUpdateManyDataInput,
  CandidateUpdateManyInput,
  CandidateUpdateManyMutationInput,
  CandidateUpdateManyWithWhereNestedInput,
  CandidateUpdateOneRequiredWithoutApplicationsInput,
  CandidateUpdateOneWithoutTasksInput,
  CandidateUpdatephonesInput,
  CandidateUpdateresumesStringInput,
  CandidateUpdateWithoutApplicationsDataInput,
  CandidateUpdateWithoutTasksDataInput,
  CandidateUpdateWithWhereUniqueNestedInput,
  CandidateUpsertWithoutApplicationsInput,
  CandidateUpsertWithoutTasksInput,
  CandidateUpsertWithWhereUniqueNestedInput,
  CandidateWhereInput,
  CandidateWhereUniqueInput,
  CommentCreateInput,
  CommentCreateManyInput,
  CommentCreateOneInput,
  CommentScalarWhereInput,
  CommentUpdateDataInput,
  CommentUpdateManyDataInput,
  CommentUpdateManyInput,
  CommentUpdateManyWithWhereNestedInput,
  CommentUpdateOneInput,
  CommentUpdateWithWhereUniqueNestedInput,
  CommentUpsertNestedInput,
  CommentUpsertWithWhereUniqueNestedInput,
  CommentWhereInput,
  CommentWhereUniqueInput,
  Connect,
  ConnectDisconnect,
  ConnectDisconnectMany,
  ConnectMany,
  DisqualificationCreateInput,
  DisqualificationCreateManyInput,
  DisqualificationCreateOneInput,
  DisqualificationInstanceCreateInput,
  DisqualificationInstanceCreateOneInput,
  DisqualificationInstanceUpdateDataInput,
  DisqualificationInstanceUpdateOneInput,
  DisqualificationInstanceUpsertNestedInput,
  DisqualificationInstanceWhereInput,
  DisqualificationInstanceWhereUniqueInput,
  DisqualificationScalarWhereInput,
  DisqualificationUpdateDataInput,
  DisqualificationUpdateManyDataInput,
  DisqualificationUpdateManyInput,
  DisqualificationUpdateManyWithWhereNestedInput,
  DisqualificationUpdateOneRequiredInput,
  DisqualificationUpdateWithWhereUniqueNestedInput,
  DisqualificationUpsertNestedInput,
  DisqualificationUpsertWithWhereUniqueNestedInput,
  DisqualificationWhereInput,
  DisqualificationWhereUniqueInput,
  FieldCreateInput,
  FieldCreateManyInput,
  FieldCreateOneInput,
  FieldInstanceCreateInput,
  FieldInstanceCreateManyInput,
  FieldInstanceScalarWhereInput,
  FieldInstanceUpdateDataInput,
  FieldInstanceUpdateManyDataInput,
  FieldInstanceUpdateManyInput,
  FieldInstanceUpdateManyWithWhereNestedInput,
  FieldInstanceUpdateWithWhereUniqueNestedInput,
  FieldInstanceUpsertWithWhereUniqueNestedInput,
  FieldInstanceWhereInput,
  FieldInstanceWhereUniqueInput,
  FieldScalarWhereInput,
  FieldUpdateDataInput,
  FieldUpdateManyDataInput,
  FieldUpdateManyInput,
  FieldUpdateManyWithWhereNestedInput,
  FieldUpdateOneRequiredInput,
  FieldUpdateWithWhereUniqueNestedInput,
  FieldUpsertNestedInput,
  FieldUpsertWithWhereUniqueNestedInput,
  FieldWhereInput,
  FieldWhereUniqueInput,
  FileCreateInput,
  FileCreateManyInput,
  FileCreateOneInput,
  FileScalarWhereInput,
  FileUpdateDataInput,
  FileUpdateManyDataInput,
  FileUpdateManyInput,
  FileUpdateManyWithWhereNestedInput,
  FileUpdateOneInput,
  FileUpdateWithWhereUniqueNestedInput,
  FileUpsertNestedInput,
  FileUpsertWithWhereUniqueNestedInput,
  FileWhereInput,
  FileWhereUniqueInput,
  InviteCreateInput,
  InviteCreateManyInput,
  InviteScalarWhereInput,
  InviteUpdateDataInput,
  InviteUpdateManyDataInput,
  InviteUpdateManyInput,
  InviteUpdateManyWithWhereNestedInput,
  InviteUpdateWithWhereUniqueNestedInput,
  InviteUpsertWithWhereUniqueNestedInput,
  InviteWhereInput,
  InviteWhereUniqueInput,
  JobCreateInput,
  JobCreateManyWithoutWorkflowInput,
  JobCreateOneWithoutApplicationsInput,
  JobCreateWithoutApplicationsInput,
  JobCreateWithoutWorkflowInput,
  JobScalarWhereInput,
  JobUpdateInput,
  JobUpdateManyDataInput,
  JobUpdateManyMutationInput,
  JobUpdateManyWithoutWorkflowInput,
  JobUpdateManyWithWhereNestedInput,
  JobUpdateOneRequiredWithoutApplicationsInput,
  JobUpdateWithoutApplicationsDataInput,
  JobUpdateWithoutWorkflowDataInput,
  JobUpdateWithWhereUniqueWithoutWorkflowInput,
  JobUpsertWithoutApplicationsInput,
  JobUpsertWithWhereUniqueWithoutWorkflowInput,
  JobWhereInput,
  JobWhereUniqueInput,
  LocationCreateInput,
  LocationCreateManyInput,
  LocationScalarWhereInput,
  LocationUpdateDataInput,
  LocationUpdateManyDataInput,
  LocationUpdateManyInput,
  LocationUpdateManyWithWhereNestedInput,
  LocationUpdateWithWhereUniqueNestedInput,
  LocationUpsertWithWhereUniqueNestedInput,
  LocationWhereInput,
  LocationWhereUniqueInput,
  LoginInput,
  RefreshInput,
  ReviewCreateInput,
  ReviewCreateManyInput,
  ReviewCreateOneInput,
  ReviewInstanceCreateInput,
  ReviewInstanceCreateManyInput,
  ReviewInstanceScalarWhereInput,
  ReviewInstanceUpdateDataInput,
  ReviewInstanceUpdateManyDataInput,
  ReviewInstanceUpdateManyInput,
  ReviewInstanceUpdateManyWithWhereNestedInput,
  ReviewInstanceUpdateWithWhereUniqueNestedInput,
  ReviewInstanceUpsertWithWhereUniqueNestedInput,
  ReviewInstanceWhereInput,
  ReviewInstanceWhereUniqueInput,
  ReviewScalarWhereInput,
  ReviewUpdateDataInput,
  ReviewUpdateManyDataInput,
  ReviewUpdateManyInput,
  ReviewUpdateManyWithWhereNestedInput,
  ReviewUpdateOneInput,
  ReviewUpdateWithWhereUniqueNestedInput,
  ReviewUpsertNestedInput,
  ReviewUpsertWithWhereUniqueNestedInput,
  ReviewWhereInput,
  ReviewWhereUniqueInput,
  SignupInput,
  SourceCreateInput,
  SourceCreateManyInput,
  SourceScalarWhereInput,
  SourceUpdateDataInput,
  SourceUpdateInput,
  SourceUpdateManyDataInput,
  SourceUpdateManyInput,
  SourceUpdateManyMutationInput,
  SourceUpdateManyWithWhereNestedInput,
  SourceUpdateWithWhereUniqueNestedInput,
  SourceUpsertWithWhereUniqueNestedInput,
  SourceWhereInput,
  SourceWhereUniqueInput,
  StageCreateInput,
  StageCreateManyInput,
  StageCreateOneInput,
  StageScalarWhereInput,
  StageUpdateDataInput,
  StageUpdateManyDataInput,
  StageUpdateManyInput,
  StageUpdateManyWithWhereNestedInput,
  StageUpdateOneRequiredInput,
  StageUpdateWithWhereUniqueNestedInput,
  StageUpsertNestedInput,
  StageUpsertWithWhereUniqueNestedInput,
  StageWhereInput,
  StageWhereUniqueInput,
  TagCreateInput,
  TagCreateManyInput,
  TagScalarWhereInput,
  TagUpdateDataInput,
  TagUpdateInput,
  TagUpdateManyDataInput,
  TagUpdateManyInput,
  TagUpdateManyMutationInput,
  TagUpdateManyWithWhereNestedInput,
  TagUpdateWithWhereUniqueNestedInput,
  TagUpsertWithWhereUniqueNestedInput,
  TagWhereInput,
  TagWhereUniqueInput,
  TaskCreateInput,
  TaskCreateManyWithoutCandidateInput,
  TaskCreateManyWithoutOwnersInput,
  TaskCreateWithoutCandidateInput,
  TaskCreateWithoutOwnersInput,
  TaskScalarWhereInput,
  TaskUpdateInput,
  TaskUpdateManyDataInput,
  TaskUpdateManyMutationInput,
  TaskUpdateManyWithoutCandidateInput,
  TaskUpdateManyWithoutOwnersInput,
  TaskUpdateManyWithWhereNestedInput,
  TaskUpdateWithoutCandidateDataInput,
  TaskUpdateWithoutOwnersDataInput,
  TaskUpdateWithWhereUniqueWithoutCandidateInput,
  TaskUpdateWithWhereUniqueWithoutOwnersInput,
  TaskUpsertWithWhereUniqueWithoutCandidateInput,
  TaskUpsertWithWhereUniqueWithoutOwnersInput,
  TaskWhereInput,
  TaskWhereUniqueInput,
  UserCreateInput,
  UserCreateManyInput,
  UserCreateManyWithoutTasksInput,
  UserCreateOneInput,
  UserCreateWithoutTasksInput,
  UserScalarWhereInput,
  UserUpdateDataInput,
  UserUpdateInput,
  UserUpdateManyDataInput,
  UserUpdateManyInput,
  UserUpdateManyWithoutTasksInput,
  UserUpdateManyWithWhereNestedInput,
  UserUpdateOneRequiredInput,
  UserUpdateWithoutTasksDataInput,
  UserUpdateWithWhereUniqueNestedInput,
  UserUpdateWithWhereUniqueWithoutTasksInput,
  UserUpsertNestedInput,
  UserUpsertWithWhereUniqueNestedInput,
  UserUpsertWithWhereUniqueWithoutTasksInput,
  UserWhereInput,
  UserWhereUniqueInput,
  WhereUniqueInput,
  WorkflowCreateInput,
  WorkflowCreateManyInput,
  WorkflowCreateOneWithoutJobsInput,
  WorkflowCreateWithoutJobsInput,
  WorkflowScalarWhereInput,
  WorkflowUpdateDataInput,
  WorkflowUpdateInput,
  WorkflowUpdateManyDataInput,
  WorkflowUpdateManyInput,
  WorkflowUpdateManyMutationInput,
  WorkflowUpdateManyWithWhereNestedInput,
  WorkflowUpdateOneRequiredWithoutJobsInput,
  WorkflowUpdateWithoutJobsDataInput,
  WorkflowUpdateWithWhereUniqueNestedInput,
  WorkflowUpsertWithoutJobsInput,
  WorkflowUpsertWithWhereUniqueNestedInput,
  WorkflowWhereInput,
  WorkflowWhereUniqueInput,
  WorkspaceCreateInput,
  WorkspaceCreateOneWithoutJobsInput,
  WorkspaceCreateWithoutJobsInput,
  WorkspaceUpdateOneRequiredWithoutJobsInput,
  WorkspaceUpdateWithoutJobsDataInput,
  WorkspaceUpsertWithoutJobsInput,
  WorkspaceWhereInput,
  WorkspaceWhereUniqueInput,
  DateTime,
  Json,
  Long,
  ApplicationOrderByInput,
  ApplicationType,
  CandidateOrderByInput,
  CommentOrderByInput,
  DisqualificationOrderByInput,
  FieldInstanceOrderByInput,
  FieldOrderByInput,
  FieldType,
  FileOrderByInput,
  InviteOrderByInput,
  JobOrderByInput,
  JobType,
  LocationOrderByInput,
  ReviewInstanceOrderByInput,
  ReviewOrderByInput,
  SourceOrderByInput,
  StageOrderByInput,
  StageType,
  TagOrderByInput,
  TaskOrderByInput,
  UserOrderByInput,
  WorkflowOrderByInput
} from './types'

import {
  ApplicationResponse,
  DisqualificationInstanceResponse,
  DisqualificationResponse,
  UserResponse,
  TaskResponse,
  CandidateResponse,
  FileResponse,
  TagResponse,
  SourceResponse,
  FieldInstanceResponse,
  FieldResponse,
  CommentResponse,
  StageResponse,
  ReviewInstanceResponse,
  ReviewResponse,
  JobResponse,
  WorkspaceResponse,
  WorkflowResponse,
  InviteResponse,
  LocationResponse,
  ApplicationConnectionResponse,
  PageInfoResponse,
  ApplicationEdgeResponse,
  AggregateApplicationResponse,
  CandidateConnectionResponse,
  CandidateEdgeResponse,
  AggregateCandidateResponse,
  JobConnectionResponse,
  JobEdgeResponse,
  AggregateJobResponse,
  SourceConnectionResponse,
  SourceEdgeResponse,
  AggregateSourceResponse,
  TagConnectionResponse,
  TagEdgeResponse,
  AggregateTagResponse,
  TaskConnectionResponse,
  TaskEdgeResponse,
  AggregateTaskResponse,
  UserConnectionResponse,
  UserEdgeResponse,
  AggregateUserResponse,
  WorkflowConnectionResponse,
  WorkflowEdgeResponse,
  AggregateWorkflowResponse,
  BatchPayloadResponse
} from './responses'

export interface Fragmentable {
    $fragment: <T = any>(fragment: any) => Promise<T>
  }

/*
 *
 * Root Client Interfaces
 *
 */

export interface QueryClient {
  application: (args: { where: ApplicationWhereUniqueInput }) => Promise<ApplicationResponse | null> & ApplicationClient
  applications: (args?: {
    where?: ApplicationWhereInput | null
    orderBy?: ApplicationOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<ApplicationResponse | null>> & ApplicationClient
  applicationsConnection: (args?: {
    where?: ApplicationWhereInput | null
    orderBy?: ApplicationOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<ApplicationConnectionResponse> & ApplicationConnectionClient
  candidate: (args: { where: CandidateWhereUniqueInput }) => Promise<CandidateResponse | null> & CandidateClient
  candidates: (args?: {
    where?: CandidateWhereInput | null
    orderBy?: CandidateOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<CandidateResponse | null>> & CandidateClient
  candidatesConnection: (args?: {
    where?: CandidateWhereInput | null
    orderBy?: CandidateOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<CandidateConnectionResponse> & CandidateConnectionClient
  job: (args: { where: JobWhereUniqueInput }) => Promise<JobResponse | null> & JobClient
  jobs: (args?: {
    where?: JobWhereInput | null
    orderBy?: JobOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<JobResponse | null>> & JobClient
  jobsConnection: (args?: {
    where?: JobWhereInput | null
    orderBy?: JobOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<JobConnectionResponse> & JobConnectionClient
  source: (args: { where: SourceWhereUniqueInput }) => Promise<SourceResponse | null> & SourceClient
  sources: (args?: {
    where?: SourceWhereInput | null
    orderBy?: SourceOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<SourceResponse | null>> & SourceClient
  sourcesConnection: (args?: {
    where?: SourceWhereInput | null
    orderBy?: SourceOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<SourceConnectionResponse> & SourceConnectionClient
  tag: (args: { where: TagWhereUniqueInput }) => Promise<TagResponse | null> & TagClient
  tags: (args?: {
    where?: TagWhereInput | null
    orderBy?: TagOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<TagResponse | null>> & TagClient
  tagsConnection: (args?: {
    where?: TagWhereInput | null
    orderBy?: TagOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<TagConnectionResponse> & TagConnectionClient
  task: (args: { where: TaskWhereUniqueInput }) => Promise<TaskResponse | null> & TaskClient
  tasks: (args?: {
    where?: TaskWhereInput | null
    orderBy?: TaskOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<TaskResponse | null>> & TaskClient
  tasksConnection: (args?: {
    where?: TaskWhereInput | null
    orderBy?: TaskOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<TaskConnectionResponse> & TaskConnectionClient
  user: (args: { where: UserWhereUniqueInput }) => Promise<UserResponse | null> & UserClient
  users: (args?: {
    where?: UserWhereInput | null
    orderBy?: UserOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<UserResponse | null>> & UserClient
  usersConnection: (args?: {
    where?: UserWhereInput | null
    orderBy?: UserOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<UserConnectionResponse> & UserConnectionClient
  workflow: (args: { where: WorkflowWhereUniqueInput }) => Promise<WorkflowResponse | null> & WorkflowClient
  workflows: (args?: {
    where?: WorkflowWhereInput | null
    orderBy?: WorkflowOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<WorkflowResponse | null>> & WorkflowClient
  workflowsConnection: (args?: {
    where?: WorkflowWhereInput | null
    orderBy?: WorkflowOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<WorkflowConnectionResponse> & WorkflowConnectionClient
}

export interface MutationClient {
  createApplication: (args: { data: ApplicationCreateInput }) => Promise<ApplicationResponse> & ApplicationClient
  updateApplication: (args: {
    data: ApplicationUpdateInput
    where: ApplicationWhereUniqueInput
  }) => Promise<ApplicationResponse | null> & ApplicationClient
  updateManyApplications: (args: {
    data: ApplicationUpdateManyMutationInput
    where?: ApplicationWhereInput | null
  }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  upsertApplication: (args: {
    where: ApplicationWhereUniqueInput
    create: ApplicationCreateInput
    update: ApplicationUpdateInput
  }) => Promise<ApplicationResponse> & ApplicationClient
  deleteApplication: (args: { where: ApplicationWhereUniqueInput }) => Promise<ApplicationResponse | null> & ApplicationClient
  deleteManyApplications: (args?: { where?: ApplicationWhereInput | null }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  createCandidate: (args: { data: CandidateCreateInput }) => Promise<CandidateResponse> & CandidateClient
  updateCandidate: (args: {
    data: CandidateUpdateInput
    where: CandidateWhereUniqueInput
  }) => Promise<CandidateResponse | null> & CandidateClient
  updateManyCandidates: (args: {
    data: CandidateUpdateManyMutationInput
    where?: CandidateWhereInput | null
  }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  upsertCandidate: (args: {
    where: CandidateWhereUniqueInput
    create: CandidateCreateInput
    update: CandidateUpdateInput
  }) => Promise<CandidateResponse> & CandidateClient
  deleteCandidate: (args: { where: CandidateWhereUniqueInput }) => Promise<CandidateResponse | null> & CandidateClient
  deleteManyCandidates: (args?: { where?: CandidateWhereInput | null }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  createJob: (args: { data: JobCreateInput }) => Promise<JobResponse> & JobClient
  updateJob: (args: {
    data: JobUpdateInput
    where: JobWhereUniqueInput
  }) => Promise<JobResponse | null> & JobClient
  updateManyJobs: (args: {
    data: JobUpdateManyMutationInput
    where?: JobWhereInput | null
  }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  upsertJob: (args: {
    where: JobWhereUniqueInput
    create: JobCreateInput
    update: JobUpdateInput
  }) => Promise<JobResponse> & JobClient
  deleteJob: (args: { where: JobWhereUniqueInput }) => Promise<JobResponse | null> & JobClient
  deleteManyJobs: (args?: { where?: JobWhereInput | null }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  createSource: (args: { data: SourceCreateInput }) => Promise<SourceResponse> & SourceClient
  updateSource: (args: {
    data: SourceUpdateInput
    where: SourceWhereUniqueInput
  }) => Promise<SourceResponse | null> & SourceClient
  updateManySources: (args: {
    data: SourceUpdateManyMutationInput
    where?: SourceWhereInput | null
  }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  upsertSource: (args: {
    where: SourceWhereUniqueInput
    create: SourceCreateInput
    update: SourceUpdateInput
  }) => Promise<SourceResponse> & SourceClient
  deleteSource: (args: { where: SourceWhereUniqueInput }) => Promise<SourceResponse | null> & SourceClient
  deleteManySources: (args?: { where?: SourceWhereInput | null }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  createTag: (args: { data: TagCreateInput }) => Promise<TagResponse> & TagClient
  updateTag: (args: {
    data: TagUpdateInput
    where: TagWhereUniqueInput
  }) => Promise<TagResponse | null> & TagClient
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput
    where?: TagWhereInput | null
  }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  upsertTag: (args: {
    where: TagWhereUniqueInput
    create: TagCreateInput
    update: TagUpdateInput
  }) => Promise<TagResponse> & TagClient
  deleteTag: (args: { where: TagWhereUniqueInput }) => Promise<TagResponse | null> & TagClient
  deleteManyTags: (args?: { where?: TagWhereInput | null }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  createTask: (args: { data: TaskCreateInput }) => Promise<TaskResponse> & TaskClient
  updateTask: (args: {
    data: TaskUpdateInput
    where: TaskWhereUniqueInput
  }) => Promise<TaskResponse | null> & TaskClient
  updateManyTasks: (args: {
    data: TaskUpdateManyMutationInput
    where?: TaskWhereInput | null
  }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  upsertTask: (args: {
    where: TaskWhereUniqueInput
    create: TaskCreateInput
    update: TaskUpdateInput
  }) => Promise<TaskResponse> & TaskClient
  deleteTask: (args: { where: TaskWhereUniqueInput }) => Promise<TaskResponse | null> & TaskClient
  deleteManyTasks: (args?: { where?: TaskWhereInput | null }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  updateUser: (args: {
    data: UserUpdateInput
    where: UserWhereUniqueInput
  }) => Promise<UserResponse | null> & UserClient
  createWorkflow: (args: { data: WorkflowCreateInput }) => Promise<WorkflowResponse> & WorkflowClient
  updateWorkflow: (args: {
    data: WorkflowUpdateInput
    where: WorkflowWhereUniqueInput
  }) => Promise<WorkflowResponse | null> & WorkflowClient
  updateManyWorkflows: (args: {
    data: WorkflowUpdateManyMutationInput
    where?: WorkflowWhereInput | null
  }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  upsertWorkflow: (args: {
    where: WorkflowWhereUniqueInput
    create: WorkflowCreateInput
    update: WorkflowUpdateInput
  }) => Promise<WorkflowResponse> & WorkflowClient
  deleteWorkflow: (args: { where: WorkflowWhereUniqueInput }) => Promise<WorkflowResponse | null> & WorkflowClient
  deleteManyWorkflows: (args?: { where?: WorkflowWhereInput | null }) => Promise<BatchPayloadResponse> & BatchPayloadClient
}

/*
 *
 * Client Interfaces
 *
 */

export interface ApplicationClient extends Fragmentable {
  createdAt: () => Promise<string>
  id: () => Promise<string>
  updatedAt: () => Promise<string>
  type: () => Promise<ApplicationType>
  disqualification: () => Promise<DisqualificationInstanceResponse | null> & DisqualificationInstanceClient
  stage: () => Promise<StageResponse> & StageClient
  reviews: (args?: {
    where?: ReviewInstanceWhereInput | null
    orderBy?: ReviewInstanceOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<ReviewInstanceResponse[] | null> & ReviewInstanceClient
  job: () => Promise<JobResponse> & JobClient
  candidate: () => Promise<CandidateResponse> & CandidateClient
}

export interface DisqualificationInstanceClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  prototype: () => Promise<DisqualificationResponse> & DisqualificationClient
  createdBy: () => Promise<UserResponse> & UserClient
  content: () => Promise<string | null>
}

export interface DisqualificationClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  name: () => Promise<string>
  description: () => Promise<string | null>
}

export interface UserClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  settings: () => Promise<any | null>
  tasks: (args?: {
    where?: TaskWhereInput | null
    orderBy?: TaskOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<TaskResponse[] | null> & TaskClient
  firstName: () => Promise<string>
  lastName: () => Promise<string>
  email: () => Promise<string>
  username: () => Promise<string>
  lastLogin: () => Promise<string | null>
  deletedAt: () => Promise<string | null>
  position: () => Promise<string | null>
  avatar: () => Promise<FileResponse | null> & FileClient
}

export interface TaskClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  owners: (args?: {
    where?: UserWhereInput | null
    orderBy?: UserOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<UserResponse[] | null> & UserClient
  candidate: () => Promise<CandidateResponse | null> & CandidateClient
  title: () => Promise<string | null>
  description: () => Promise<string | null>
  dueAt: () => Promise<string | null>
}

export interface CandidateClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  firstName: () => Promise<string | null>
  lastName: () => Promise<string | null>
  emails: () => Promise<string[]>
  phones: () => Promise<string[]>
  links: () => Promise<string[]>
  avatar: () => Promise<FileResponse | null> & FileClient
  company: () => Promise<string | null>
  headline: () => Promise<string | null>
  position: () => Promise<string | null>
  resumesString: () => Promise<string[]>
  resumesFile: (args?: {
    where?: FileWhereInput | null
    orderBy?: FileOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<FileResponse[] | null> & FileClient
  coverLettersString: () => Promise<string[]>
  coverLettersFile: (args?: {
    where?: FileWhereInput | null
    orderBy?: FileOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<FileResponse[] | null> & FileClient
  tags: (args?: {
    where?: TagWhereInput | null
    orderBy?: TagOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<TagResponse[] | null> & TagClient
  sources: (args?: {
    where?: SourceWhereInput | null
    orderBy?: SourceOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<SourceResponse[] | null> & SourceClient
  fields: (args?: {
    where?: FieldInstanceWhereInput | null
    orderBy?: FieldInstanceOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<FieldInstanceResponse[] | null> & FieldInstanceClient
  tasks: (args?: {
    where?: TaskWhereInput | null
    orderBy?: TaskOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<TaskResponse[] | null> & TaskClient
  applications: (args?: {
    where?: ApplicationWhereInput | null
    orderBy?: ApplicationOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<ApplicationResponse[] | null> & ApplicationClient
  comments: (args?: {
    where?: CommentWhereInput | null
    orderBy?: CommentOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<CommentResponse[] | null> & CommentClient
}

export interface FileClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  size: () => Promise<number>
  type: () => Promise<string>
  name: () => Promise<string>
  url: () => Promise<string>
}

export interface TagClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  label: () => Promise<string>
  description: () => Promise<string | null>
}

export interface SourceClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  label: () => Promise<string>
  description: () => Promise<string | null>
}

export interface FieldInstanceClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  prototype: () => Promise<FieldResponse> & FieldClient
  value: () => Promise<string | null>
}

export interface FieldClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  type: () => Promise<FieldType>
  label: () => Promise<string>
  description: () => Promise<string | null>
}

export interface CommentClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  createdBy: () => Promise<UserResponse> & UserClient
  parent: () => Promise<CommentResponse | null> & CommentClient
  content: () => Promise<string>
}

export interface StageClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  name: () => Promise<string>
  description: () => Promise<string | null>
  type: () => Promise<StageType>
  index: () => Promise<number>
}

export interface ReviewInstanceClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  prototype: () => Promise<ReviewResponse | null> & ReviewClient
  fields: (args?: {
    where?: FieldInstanceWhereInput | null
    orderBy?: FieldInstanceOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<FieldInstanceResponse[] | null> & FieldInstanceClient
  createdBy: () => Promise<UserResponse> & UserClient
  rating: () => Promise<number | null>
  content: () => Promise<string | null>
}

export interface ReviewClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  name: () => Promise<string>
  fields: (args?: {
    where?: FieldWhereInput | null
    orderBy?: FieldOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<FieldResponse[] | null> & FieldClient
}

export interface JobClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  workspace: () => Promise<WorkspaceResponse> & WorkspaceClient
  applications: (args?: {
    where?: ApplicationWhereInput | null
    orderBy?: ApplicationOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<ApplicationResponse[] | null> & ApplicationClient
  workflow: () => Promise<WorkflowResponse> & WorkflowClient
  comments: (args?: {
    where?: CommentWhereInput | null
    orderBy?: CommentOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<CommentResponse[] | null> & CommentClient
  type: () => Promise<JobType>
  department: () => Promise<string | null>
  locations: (args?: {
    where?: LocationWhereInput | null
    orderBy?: LocationOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<LocationResponse[] | null> & LocationClient
  name: () => Promise<string>
  excerpt: () => Promise<string | null>
  companyDescription: () => Promise<string | null>
  description: () => Promise<string | null>
  requirements: () => Promise<string | null>
}

export interface WorkspaceClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  users: (args?: {
    where?: UserWhereInput | null
    orderBy?: UserOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<UserResponse[] | null> & UserClient
  jobs: (args?: {
    where?: JobWhereInput | null
    orderBy?: JobOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<JobResponse[] | null> & JobClient
  candidates: (args?: {
    where?: CandidateWhereInput | null
    orderBy?: CandidateOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<CandidateResponse[] | null> & CandidateClient
  settings: () => Promise<any | null>
  workflows: (args?: {
    where?: WorkflowWhereInput | null
    orderBy?: WorkflowOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<WorkflowResponse[] | null> & WorkflowClient
  invites: (args?: {
    where?: InviteWhereInput | null
    orderBy?: InviteOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<InviteResponse[] | null> & InviteClient
  name: () => Promise<string>
}

export interface WorkflowClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  jobs: (args?: {
    where?: JobWhereInput | null
    orderBy?: JobOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<JobResponse[] | null> & JobClient
  name: () => Promise<string>
  description: () => Promise<string | null>
  stages: (args?: {
    where?: StageWhereInput | null
    orderBy?: StageOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<StageResponse[] | null> & StageClient
  disqualifications: (args?: {
    where?: DisqualificationWhereInput | null
    orderBy?: DisqualificationOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<DisqualificationResponse[] | null> & DisqualificationClient
  fields: (args?: {
    where?: FieldWhereInput | null
    orderBy?: FieldOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<FieldResponse[] | null> & FieldClient
  reviews: (args?: {
    where?: ReviewWhereInput | null
    orderBy?: ReviewOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<ReviewResponse[] | null> & ReviewClient
}

export interface InviteClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  email: () => Promise<string>
  expireAt: () => Promise<string>
  invitedBy: () => Promise<UserResponse> & UserClient
}

export interface LocationClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  updatedAt: () => Promise<string>
  country: () => Promise<string>
  region: () => Promise<string | null>
  city: () => Promise<string>
  zip: () => Promise<string | null>
}

export interface ApplicationConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<ApplicationEdgeResponse | null>> & ApplicationEdgeClient
  aggregate: () => Promise<AggregateApplicationResponse> & AggregateApplicationClient
}

export interface PageInfoClient extends Fragmentable {
  hasNextPage: () => Promise<boolean>
  hasPreviousPage: () => Promise<boolean>
  startCursor: () => Promise<string | null>
  endCursor: () => Promise<string | null>
}

export interface ApplicationEdgeClient extends Fragmentable {
  node: () => Promise<ApplicationResponse> & ApplicationClient
  cursor: () => Promise<string>
}

export interface AggregateApplicationClient extends Fragmentable {
  count: () => Promise<number>
}

export interface CandidateConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<CandidateEdgeResponse | null>> & CandidateEdgeClient
  aggregate: () => Promise<AggregateCandidateResponse> & AggregateCandidateClient
}

export interface CandidateEdgeClient extends Fragmentable {
  node: () => Promise<CandidateResponse> & CandidateClient
  cursor: () => Promise<string>
}

export interface AggregateCandidateClient extends Fragmentable {
  count: () => Promise<number>
}

export interface JobConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<JobEdgeResponse | null>> & JobEdgeClient
  aggregate: () => Promise<AggregateJobResponse> & AggregateJobClient
}

export interface JobEdgeClient extends Fragmentable {
  node: () => Promise<JobResponse> & JobClient
  cursor: () => Promise<string>
}

export interface AggregateJobClient extends Fragmentable {
  count: () => Promise<number>
}

export interface SourceConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<SourceEdgeResponse | null>> & SourceEdgeClient
  aggregate: () => Promise<AggregateSourceResponse> & AggregateSourceClient
}

export interface SourceEdgeClient extends Fragmentable {
  node: () => Promise<SourceResponse> & SourceClient
  cursor: () => Promise<string>
}

export interface AggregateSourceClient extends Fragmentable {
  count: () => Promise<number>
}

export interface TagConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<TagEdgeResponse | null>> & TagEdgeClient
  aggregate: () => Promise<AggregateTagResponse> & AggregateTagClient
}

export interface TagEdgeClient extends Fragmentable {
  node: () => Promise<TagResponse> & TagClient
  cursor: () => Promise<string>
}

export interface AggregateTagClient extends Fragmentable {
  count: () => Promise<number>
}

export interface TaskConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<TaskEdgeResponse | null>> & TaskEdgeClient
  aggregate: () => Promise<AggregateTaskResponse> & AggregateTaskClient
}

export interface TaskEdgeClient extends Fragmentable {
  node: () => Promise<TaskResponse> & TaskClient
  cursor: () => Promise<string>
}

export interface AggregateTaskClient extends Fragmentable {
  count: () => Promise<number>
}

export interface UserConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<UserEdgeResponse | null>> & UserEdgeClient
  aggregate: () => Promise<AggregateUserResponse> & AggregateUserClient
}

export interface UserEdgeClient extends Fragmentable {
  node: () => Promise<UserResponse> & UserClient
  cursor: () => Promise<string>
}

export interface AggregateUserClient extends Fragmentable {
  count: () => Promise<number>
}

export interface WorkflowConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<WorkflowEdgeResponse | null>> & WorkflowEdgeClient
  aggregate: () => Promise<AggregateWorkflowResponse> & AggregateWorkflowClient
}

export interface WorkflowEdgeClient extends Fragmentable {
  node: () => Promise<WorkflowResponse> & WorkflowClient
  cursor: () => Promise<string>
}

export interface AggregateWorkflowClient extends Fragmentable {
  count: () => Promise<number>
}

export interface BatchPayloadClient extends Fragmentable {
  count: () => Promise<number>
}

