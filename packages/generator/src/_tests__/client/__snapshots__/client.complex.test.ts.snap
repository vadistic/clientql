// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate client on complex props print client clients 1`] = `
"/*
 *
 * Code generated by Graphql Client Generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run 'something' to update it.
 * For more information, please read the docs: https://doclink.com/
 *
 */

import { Stake } from './types'

import {
  EventResponse,
  ConcertResponse,
  VenueResponse,
  PerformerResponse,
  PersonResponse,
  ClientResponse,
  FestivalResponse,
  StakeholderResponse,
  SpeakerResponse,
  ConferenceResponse
} from './responses'

/*
 *
 * Root Client Interfaces
 *
 */

export interface MyQueryClient {
  findEventsAtVenue: (args?: { venueId: string }) => Promise<Array<EventResponse | null> | null> & EventClient
  findPerson: (args?: { id: string }) => Promise<PersonResponse | null> & PersonClient
}

export interface MyMutationClient {
  deleteEvent: (args?: { eventId: string }) => Promise<Array<EventResponse | null> | null> & EventClient
}

/*
 *
 * Client Interfaces
 *
 */

export interface EventClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  startsAt: () => Promise<string | null>
  endsAt: () => Promise<string | null>
  venue: () => Promise<VenueResponse | null> & VenueClient
  minAgeRestriction: () => Promise<number | null>
  Concert: {
    id: () => Promise<string>
    name: () => Promise<string>
    startsAt: () => Promise<string | null>
    endsAt: () => Promise<string | null>
    venue: () => Promise<VenueResponse | null> & VenueClient
    previousVenues: () => Promise<VenueResponse[] | null> & VenueClient
    minAgeRestriction: () => Promise<number | null>
    performingBand: () => Promise<PerformerResponse | null> & PerformerClient
  }
  Festival: {
    id: () => Promise<string>
    name: () => Promise<string>
    startsAt: () => Promise<string | null>
    endsAt: () => Promise<string | null>
    venue: () => Promise<VenueResponse | null> & VenueClient
    minAgeRestriction: () => Promise<number | null>
    performers: () => Promise<Array<PerformerResponse | null> | null> & PerformerClient
  }
  Conference: {
    id: () => Promise<string>
    name: () => Promise<string>
    startsAt: () => Promise<string | null>
    endsAt: () => Promise<string | null>
    venue: () => Promise<VenueResponse | null> & VenueClient
    minAgeRestriction: () => Promise<number | null>
    speakers: () => Promise<Array<SpeakerResponse | null> | null> & SpeakerClient
    workshops: () => Promise<Array<string | null> | null>
  }
}

export interface ConcertClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  startsAt: () => Promise<string | null>
  endsAt: () => Promise<string | null>
  venue: () => Promise<VenueResponse | null> & VenueClient
  previousVenues: () => Promise<VenueResponse[] | null> & VenueClient
  minAgeRestriction: () => Promise<number | null>
  performingBand: () => Promise<PerformerResponse | null> & PerformerClient
}

export interface VenueClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  address: () => Promise<string | null>
  maxOccupancy: () => Promise<number | null>
}

export interface PerformerClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  contact: () => Promise<string | null>
  speciality: () => Promise<string | null>
  fee: () => Promise<number | null>
}

export interface PersonClient extends Fragmentable {
  Client: {
    id: () => Promise<string>
    name: () => Promise<string>
    events: () => Promise<Array<EventResponse | null> | null> & EventClient
  }
  Stakeholder: {
    id: () => Promise<string>
    name: () => Promise<string>
    company: () => Promise<string | null>
    stake: () => Promise<Stake | null>
  }
  Speaker: {
    id: () => Promise<string>
    name: () => Promise<string>
    contact: () => Promise<string | null>
  }
  Performer: {
    id: () => Promise<string>
    name: () => Promise<string>
    contact: () => Promise<string | null>
    speciality: () => Promise<string | null>
    fee: () => Promise<number | null>
  }
}

export interface ClientClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  events: () => Promise<Array<EventResponse | null> | null> & EventClient
}

export interface FestivalClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  startsAt: () => Promise<string | null>
  endsAt: () => Promise<string | null>
  venue: () => Promise<VenueResponse | null> & VenueClient
  minAgeRestriction: () => Promise<number | null>
  performers: () => Promise<Array<PerformerResponse | null> | null> & PerformerClient
}

export interface StakeholderClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  company: () => Promise<string | null>
  stake: () => Promise<Stake | null>
}

export interface SpeakerClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  contact: () => Promise<string | null>
}

export interface ConferenceClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  startsAt: () => Promise<string | null>
  endsAt: () => Promise<string | null>
  venue: () => Promise<VenueResponse | null> & VenueClient
  minAgeRestriction: () => Promise<number | null>
  speakers: () => Promise<Array<SpeakerResponse | null> | null> & SpeakerClient
  workshops: () => Promise<Array<string | null> | null>
}

"
`;

exports[`generate client on complex props print client index (boilerplate) 1`] = `
"/*
 *
 * Code generated by Graphql Client Generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run 'something' to update it.
 * For more information, please read the docs: https://doclink.com/
 *
 */

import { MyQueryClient, MyMutationClient } from './clients'

export * from './clients'
export * from './responses'
export * from './types'
export * from './typedefs'

export interface ClientProxy {
  query: MyQueryClient
  mutation: MyMutationClient
}

"
`;

exports[`generate client on complex props print client responses 1`] = `
"/*
 *
 * Code generated by Graphql Client Generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run 'something' to update it.
 * For more information, please read the docs: https://doclink.com/
 *
 */

/*
 *
 * Responses
 *
 */

export type EventResponse = EventFlat & {
  venue?: VenueFlat
} & (ConcertFlat & {
  venue?: VenueFlat
  previousVenues?: VenueFlat
  performingBand?: PerformerFlat
} | FestivalFlat & {
  venue?: VenueFlat
  performers?: PerformerFlat
} | ConferenceFlat & {
  venue?: VenueFlat
  speakers?: SpeakerFlat
})

export type ConcertResponse = ConcertFlat & {
  venue?: VenueFlat
  previousVenues?: VenueFlat
  performingBand?: PerformerFlat
}

export type VenueResponse = VenueFlat

export type PerformerResponse = PerformerFlat

export type PersonResponse = PersonFlat & (ClientFlat & {
  events?: EventFlat & {
    venue?: VenueFlat
  } & (ConcertFlat & {
    venue?: VenueFlat
    previousVenues?: VenueFlat
    performingBand?: PerformerFlat
  } | FestivalFlat & {
    venue?: VenueFlat
    performers?: PerformerFlat
  } | ConferenceFlat & {
    venue?: VenueFlat
    speakers?: SpeakerFlat
  })
} | StakeholderFlat | SpeakerFlat | PerformerFlat)

export type ClientResponse = ClientFlat & {
  events?: EventFlat & {
    venue?: VenueFlat
  } & (ConcertFlat & {
    venue?: VenueFlat
    previousVenues?: VenueFlat
    performingBand?: PerformerFlat
  } | FestivalFlat & {
    venue?: VenueFlat
    performers?: PerformerFlat
  } | ConferenceFlat & {
    venue?: VenueFlat
    speakers?: SpeakerFlat
  })
}

export type FestivalResponse = FestivalFlat & {
  venue?: VenueFlat
  performers?: PerformerFlat
}

export type StakeholderResponse = StakeholderFlat

export type SpeakerResponse = SpeakerFlat

export type ConferenceResponse = ConferenceFlat & {
  venue?: VenueFlat
  speakers?: SpeakerFlat
}

/*
 *
 * Fragments
 *
 */

export type EventFlat = {
  id: string
  name: string
  startsAt?: string | null
  endsAt?: string | null
  minAgeRestriction?: number | null
}

export type VenueFlat = {
  id: string
  name: string
  address?: string | null
  maxOccupancy?: number | null
}

export type ConcertFlat = {
  id: string
  name: string
  startsAt?: string | null
  endsAt?: string | null
  minAgeRestriction?: number | null
}

export type PerformerFlat = {
  id: string
  name: string
  contact?: string | null
  speciality?: string | null
  fee?: number | null
}

export type FestivalFlat = {
  id: string
  name: string
  startsAt?: string | null
  endsAt?: string | null
  minAgeRestriction?: number | null
}

export type ConferenceFlat = {
  id: string
  name: string
  startsAt?: string | null
  endsAt?: string | null
  minAgeRestriction?: number | null
  workshops?: Array<string | null> | null
}

export type SpeakerFlat = {
  id: string
  name: string
  contact?: string | null
}

export type PersonFlat = 

export type ClientFlat = {
  id: string
  name: string
}

export type StakeholderFlat = {
  id: string
  name: string
  company?: string | null
  stake?: Stake | null
}

"
`;

exports[`generate client on complex props print client typedefs 1`] = `
"/*
 *
 * Code generated by Graphql Client Generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run 'something' to update it.
 * For more information, please read the docs: https://doclink.com/
 *
 */

/*
 *
 * Client Runtime TypeDefs
 *
 */

export const  TYPEDEFS = {
  kind: \\"Document\\",
  definitions: [
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"MyQuery\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"findEventsAtVenue\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"venueId\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ID\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Event\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"findPerson\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"id\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ID\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Person\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"MyMutation\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"deleteEvent\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"eventId\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ID\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Event\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Stakeholder\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"company\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"stake\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Stake\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Client\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"events\\"
          },
          arguments: [],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Event\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Performer\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"contact\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"speciality\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"fee\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Int\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Speaker\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"contact\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"UnionTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Person\\"
      },
      directives: [],
      types: [
        {
          kind: \\"NamedType\\",
          name: {
            kind: \\"Name\\",
            value: \\"Client\\"
          }
        },
        {
          kind: \\"NamedType\\",
          name: {
            kind: \\"Name\\",
            value: \\"Stakeholder\\"
          }
        },
        {
          kind: \\"NamedType\\",
          name: {
            kind: \\"Name\\",
            value: \\"Speaker\\"
          }
        },
        {
          kind: \\"NamedType\\",
          name: {
            kind: \\"Name\\",
            value: \\"Performer\\"
          }
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Venue\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"address\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"maxOccupancy\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Int\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"InterfaceTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Event\\"
      },
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"startsAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"endsAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"venue\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Venue\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"minAgeRestriction\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Int\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Concert\\"
      },
      interfaces: [
        {
          kind: \\"NamedType\\",
          name: {
            kind: \\"Name\\",
            value: \\"Event\\"
          }
        }
      ],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"startsAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"endsAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"venue\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Venue\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"previousVenues\\"
          },
          arguments: [],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NonNullType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Venue\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"minAgeRestriction\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Int\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"performingBand\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Performer\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Festival\\"
      },
      interfaces: [
        {
          kind: \\"NamedType\\",
          name: {
            kind: \\"Name\\",
            value: \\"Event\\"
          }
        }
      ],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"startsAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"endsAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"venue\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Venue\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"minAgeRestriction\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Int\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"performers\\"
          },
          arguments: [],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Performer\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Conference\\"
      },
      interfaces: [
        {
          kind: \\"NamedType\\",
          name: {
            kind: \\"Name\\",
            value: \\"Event\\"
          }
        }
      ],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"startsAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"endsAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"venue\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Venue\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"minAgeRestriction\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Int\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"speakers\\"
          },
          arguments: [],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Speaker\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"workshops\\"
          },
          arguments: [],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"SchemaDefinition\\",
      directives: [],
      operationTypes: [
        {
          kind: \\"OperationTypeDefinition\\",
          operation: \\"query\\",
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"MyQuery\\"
            }
          }
        },
        {
          kind: \\"OperationTypeDefinition\\",
          operation: \\"mutation\\",
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"MyMutation\\"
            }
          }
        }
      ]
    }
  ]
}

"
`;

exports[`generate client on complex props print client types 1`] = `
"/*
 *
 * Code generated by Graphql Client Generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run 'something' to update it.
 * For more information, please read the docs: https://doclink.com/
 *
 */

/*
 *
 * ObjectTypeDefinition Typings
 *
 */

export interface MyQuery {
  __typename: 'MyQuery'
  findEventsAtVenue?: Array<Event | null> | null
  findPerson?: Person | null
}

export interface MyMutation {
  __typename: 'MyMutation'
  deleteEvent?: Array<Event | null> | null
}

export interface Stakeholder {
  __typename: 'Stakeholder'
  id: string
  name: string
  company?: string | null
  stake?: Stake | null
}

export interface Client {
  __typename: 'Client'
  id: string
  name: string
  events?: Array<Event | null> | null
}

export interface Performer {
  __typename: 'Performer'
  id: string
  name: string
  contact?: string | null
  speciality?: string | null
  fee?: number | null
}

export interface Speaker {
  __typename: 'Speaker'
  id: string
  name: string
  contact?: string | null
}

export interface Venue {
  __typename: 'Venue'
  id: string
  name: string
  address?: string | null
  maxOccupancy?: number | null
}

export interface Concert {
  __typename: 'Concert'
  id: string
  name: string
  startsAt?: string | null
  endsAt?: string | null
  venue?: Venue | null
  previousVenues?: Venue[] | null
  minAgeRestriction?: number | null
  performingBand?: Performer | null
}

export interface Festival {
  __typename: 'Festival'
  id: string
  name: string
  startsAt?: string | null
  endsAt?: string | null
  venue?: Venue | null
  minAgeRestriction?: number | null
  performers?: Array<Performer | null> | null
}

export interface Conference {
  __typename: 'Conference'
  id: string
  name: string
  startsAt?: string | null
  endsAt?: string | null
  venue?: Venue | null
  minAgeRestriction?: number | null
  speakers?: Array<Speaker | null> | null
  workshops?: Array<string | null> | null
}



/*
 *
 * EnumTypeDefinition Typings
 *
 */

export interface Stake {
  LOW: 'LOW'
  MEDIUM: 'MEDIUM'
  HIGH: 'HIGH'
}

export const Stake: Stake = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
}



/*
 *
 * UnionTypeDefinition Typings
 *
 */

export type Person = 
  | Client
  | Stakeholder
  | Speaker
  | Performer



/*
 *
 * InterfaceTypeDefinition Typings
 *
 */

export interface Event {
  id: string
  name: string
  startsAt?: string | null
  endsAt?: string | null
  venue?: Venue | null
  minAgeRestriction?: number | null
}



/*
 *
 * SchemaDefinition Typings
 *
 */

export type Query = MyQuery

export type Mutation = MyMutation



"
`;
