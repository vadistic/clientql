// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate client on prisma props > print client clients 1`] = `
"/*
 *
 * Code generated by Graphql Client Generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run 'something' to update it.
 * For more information, please read the docs: https://doclink.com/
 *
 */

import {
  BoardCreateInput,
  BoardSubscriptionWhereInput,
  BoardUpdateInput,
  BoardWhereInput,
  BoardWhereUniqueInput,
  PostCreateInput,
  PostCreateManyInput,
  PostCreateManyWithoutAuthorInput,
  PostCreateOneInput,
  PostCreateWithoutAuthorInput,
  PostScalarWhereInput,
  PostSubscriptionWhereInput,
  PostUpdateDataInput,
  PostUpdateInput,
  PostUpdateManyDataInput,
  PostUpdateManyInput,
  PostUpdateManyMutationInput,
  PostUpdateManyWithoutAuthorInput,
  PostUpdateManyWithWhereNestedInput,
  PostUpdateOneRequiredInput,
  PostUpdateWithoutAuthorDataInput,
  PostUpdateWithWhereUniqueNestedInput,
  PostUpdateWithWhereUniqueWithoutAuthorInput,
  PostUpsertNestedInput,
  PostUpsertWithWhereUniqueNestedInput,
  PostUpsertWithWhereUniqueWithoutAuthorInput,
  PostWhereInput,
  PostWhereUniqueInput,
  ThreadCreateInput,
  ThreadCreateManyInput,
  ThreadScalarWhereInput,
  ThreadSubscriptionWhereInput,
  ThreadUpdateDataInput,
  ThreadUpdateInput,
  ThreadUpdateManyDataInput,
  ThreadUpdateManyInput,
  ThreadUpdateManyMutationInput,
  ThreadUpdateManyWithWhereNestedInput,
  ThreadUpdateWithWhereUniqueNestedInput,
  ThreadUpsertWithWhereUniqueNestedInput,
  ThreadWhereInput,
  ThreadWhereUniqueInput,
  UserCreateInput,
  UserCreateManyInput,
  UserCreateOneInput,
  UserCreateOneWithoutPostsInput,
  UserCreateWithoutPostsInput,
  UserScalarWhereInput,
  UserSubscriptionWhereInput,
  UserUpdateDataInput,
  UserUpdateInput,
  UserUpdateManyDataInput,
  UserUpdateManyInput,
  UserUpdateManyMutationInput,
  UserUpdateManyWithWhereNestedInput,
  UserUpdateOneRequiredInput,
  UserUpdateOneRequiredWithoutPostsInput,
  UserUpdateWithoutPostsDataInput,
  UserUpdateWithWhereUniqueNestedInput,
  UserUpsertNestedInput,
  UserUpsertWithoutPostsInput,
  UserUpsertWithWhereUniqueNestedInput,
  UserWhereInput,
  UserWhereUniqueInput,
  DateTime,
  Long,
  BoardOrderByInput,
  MutationType,
  PostOrderByInput,
  ThreadOrderByInput,
  UserOrderByInput
} from './types'

import {
  BoardResponse,
  UserResponse,
  PostResponse,
  ThreadResponse,
  BoardConnectionResponse,
  PageInfoResponse,
  BoardEdgeResponse,
  AggregateBoardResponse,
  PostConnectionResponse,
  PostEdgeResponse,
  AggregatePostResponse,
  ThreadConnectionResponse,
  ThreadEdgeResponse,
  AggregateThreadResponse,
  UserConnectionResponse,
  UserEdgeResponse,
  AggregateUserResponse,
  NodeResponse,
  BatchPayloadResponse,
  BoardSubscriptionPayloadResponse,
  BoardPreviousValuesResponse,
  PostSubscriptionPayloadResponse,
  PostPreviousValuesResponse,
  ThreadSubscriptionPayloadResponse,
  ThreadPreviousValuesResponse,
  UserSubscriptionPayloadResponse,
  UserPreviousValuesResponse
} from './responses'

/*
 *
 * Root Client Interfaces
 *
 */

export interface QueryClient {
  board: (args?: { where: BoardWhereUniqueInput }) => Promise<BoardResponse | null> & BoardClient
  boards: (args: {
    where?: BoardWhereInput | null
    orderBy?: BoardOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<BoardResponse | null>> & BoardClient
  boardsConnection: (args: {
    where?: BoardWhereInput | null
    orderBy?: BoardOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<BoardConnectionResponse> & BoardConnectionClient
  post: (args?: { where: PostWhereUniqueInput }) => Promise<PostResponse | null> & PostClient
  posts: (args: {
    where?: PostWhereInput | null
    orderBy?: PostOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<PostResponse | null>> & PostClient
  postsConnection: (args: {
    where?: PostWhereInput | null
    orderBy?: PostOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<PostConnectionResponse> & PostConnectionClient
  thread: (args?: { where: ThreadWhereUniqueInput }) => Promise<ThreadResponse | null> & ThreadClient
  threads: (args: {
    where?: ThreadWhereInput | null
    orderBy?: ThreadOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<ThreadResponse | null>> & ThreadClient
  threadsConnection: (args: {
    where?: ThreadWhereInput | null
    orderBy?: ThreadOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<ThreadConnectionResponse> & ThreadConnectionClient
  user: (args?: { where: UserWhereUniqueInput }) => Promise<UserResponse | null> & UserClient
  users: (args: {
    where?: UserWhereInput | null
    orderBy?: UserOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<Array<UserResponse | null>> & UserClient
  usersConnection: (args: {
    where?: UserWhereInput | null
    orderBy?: UserOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<UserConnectionResponse> & UserConnectionClient
  node: (args?: { id: string }) => Promise<NodeResponse | null> & NodeClient
}

export interface MutationClient {
  createBoard: (args: { data: BoardCreateInput }) => Promise<BoardResponse> & BoardClient
  updateBoard: (args?: {
    data: BoardUpdateInput
    where: BoardWhereUniqueInput
  }) => Promise<BoardResponse | null> & BoardClient
  upsertBoard: (args: {
    where: BoardWhereUniqueInput
    create: BoardCreateInput
    update: BoardUpdateInput
  }) => Promise<BoardResponse> & BoardClient
  deleteBoard: (args?: { where: BoardWhereUniqueInput }) => Promise<BoardResponse | null> & BoardClient
  deleteManyBoards: (args: { where?: BoardWhereInput | null }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  createPost: (args: { data: PostCreateInput }) => Promise<PostResponse> & PostClient
  updatePost: (args?: {
    data: PostUpdateInput
    where: PostWhereUniqueInput
  }) => Promise<PostResponse | null> & PostClient
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput
    where?: PostWhereInput | null
  }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  upsertPost: (args: {
    where: PostWhereUniqueInput
    create: PostCreateInput
    update: PostUpdateInput
  }) => Promise<PostResponse> & PostClient
  deletePost: (args?: { where: PostWhereUniqueInput }) => Promise<PostResponse | null> & PostClient
  deleteManyPosts: (args: { where?: PostWhereInput | null }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  createThread: (args: { data: ThreadCreateInput }) => Promise<ThreadResponse> & ThreadClient
  updateThread: (args?: {
    data: ThreadUpdateInput
    where: ThreadWhereUniqueInput
  }) => Promise<ThreadResponse | null> & ThreadClient
  updateManyThreads: (args: {
    data: ThreadUpdateManyMutationInput
    where?: ThreadWhereInput | null
  }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  upsertThread: (args: {
    where: ThreadWhereUniqueInput
    create: ThreadCreateInput
    update: ThreadUpdateInput
  }) => Promise<ThreadResponse> & ThreadClient
  deleteThread: (args?: { where: ThreadWhereUniqueInput }) => Promise<ThreadResponse | null> & ThreadClient
  deleteManyThreads: (args: { where?: ThreadWhereInput | null }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  createUser: (args: { data: UserCreateInput }) => Promise<UserResponse> & UserClient
  updateUser: (args?: {
    data: UserUpdateInput
    where: UserWhereUniqueInput
  }) => Promise<UserResponse | null> & UserClient
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput
    where?: UserWhereInput | null
  }) => Promise<BatchPayloadResponse> & BatchPayloadClient
  upsertUser: (args: {
    where: UserWhereUniqueInput
    create: UserCreateInput
    update: UserUpdateInput
  }) => Promise<UserResponse> & UserClient
  deleteUser: (args?: { where: UserWhereUniqueInput }) => Promise<UserResponse | null> & UserClient
  deleteManyUsers: (args: { where?: UserWhereInput | null }) => Promise<BatchPayloadResponse> & BatchPayloadClient
}

export interface SubscriptionClient {
  board: (args?: { where?: BoardSubscriptionWhereInput | null }) => Promise<BoardSubscriptionPayloadResponse | null> & BoardSubscriptionPayloadClient
  post: (args?: { where?: PostSubscriptionWhereInput | null }) => Promise<PostSubscriptionPayloadResponse | null> & PostSubscriptionPayloadClient
  thread: (args?: { where?: ThreadSubscriptionWhereInput | null }) => Promise<ThreadSubscriptionPayloadResponse | null> & ThreadSubscriptionPayloadClient
  user: (args?: { where?: UserSubscriptionWhereInput | null }) => Promise<UserSubscriptionPayloadResponse | null> & UserSubscriptionPayloadClient
}

/*
 *
 * Client Interfaces
 *
 */

export interface BoardClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  admins: (args?: {
    where?: UserWhereInput | null
    orderBy?: UserOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<UserResponse[] | null> & UserClient
  members: (args?: {
    where?: UserWhereInput | null
    orderBy?: UserOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<UserResponse[] | null> & UserClient
  threads: (args?: {
    where?: ThreadWhereInput | null
    orderBy?: ThreadOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<ThreadResponse[] | null> & ThreadClient
}

export interface UserClient extends Fragmentable {
  id: () => Promise<string>
  nationality: () => Promise<string | null>
  email: () => Promise<string>
  name: () => Promise<string | null>
  posts: (args?: {
    where?: PostWhereInput | null
    orderBy?: PostOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<PostResponse[] | null> & PostClient
}

export interface PostClient extends Fragmentable {
  id: () => Promise<string>
  author: () => Promise<UserResponse> & UserClient
  content: () => Promise<string | null>
  createdAt: () => Promise<string>
  published: () => Promise<boolean>
  title: () => Promise<string>
  updatedAt: () => Promise<string>
}

export interface ThreadClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  author: () => Promise<UserResponse> & UserClient
  name: () => Promise<string>
  entry: () => Promise<PostResponse> & PostClient
  replies: (args?: {
    where?: PostWhereInput | null
    orderBy?: PostOrderByInput | null
    skip?: number | null
    after?: string | null
    before?: string | null
    first?: number | null
    last?: number | null
  }) => Promise<PostResponse[] | null> & PostClient
}

export interface BoardConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<BoardEdgeResponse | null>> & BoardEdgeClient
  aggregate: () => Promise<AggregateBoardResponse> & AggregateBoardClient
}

export interface PageInfoClient extends Fragmentable {
  hasNextPage: () => Promise<boolean>
  hasPreviousPage: () => Promise<boolean>
  startCursor: () => Promise<string | null>
  endCursor: () => Promise<string | null>
}

export interface BoardEdgeClient extends Fragmentable {
  node: () => Promise<BoardResponse> & BoardClient
  cursor: () => Promise<string>
}

export interface AggregateBoardClient extends Fragmentable {
  count: () => Promise<number>
}

export interface PostConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<PostEdgeResponse | null>> & PostEdgeClient
  aggregate: () => Promise<AggregatePostResponse> & AggregatePostClient
}

export interface PostEdgeClient extends Fragmentable {
  node: () => Promise<PostResponse> & PostClient
  cursor: () => Promise<string>
}

export interface AggregatePostClient extends Fragmentable {
  count: () => Promise<number>
}

export interface ThreadConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<ThreadEdgeResponse | null>> & ThreadEdgeClient
  aggregate: () => Promise<AggregateThreadResponse> & AggregateThreadClient
}

export interface ThreadEdgeClient extends Fragmentable {
  node: () => Promise<ThreadResponse> & ThreadClient
  cursor: () => Promise<string>
}

export interface AggregateThreadClient extends Fragmentable {
  count: () => Promise<number>
}

export interface UserConnectionClient extends Fragmentable {
  pageInfo: () => Promise<PageInfoResponse> & PageInfoClient
  edges: () => Promise<Array<UserEdgeResponse | null>> & UserEdgeClient
  aggregate: () => Promise<AggregateUserResponse> & AggregateUserClient
}

export interface UserEdgeClient extends Fragmentable {
  node: () => Promise<UserResponse> & UserClient
  cursor: () => Promise<string>
}

export interface AggregateUserClient extends Fragmentable {
  count: () => Promise<number>
}

export interface NodeClient extends Fragmentable {
  id: () => Promise<string>
}

export interface BatchPayloadClient extends Fragmentable {
  count: () => Promise<number>
}

export interface BoardSubscriptionPayloadClient extends Fragmentable {
  mutation: () => Promise<MutationType>
  node: () => Promise<BoardResponse | null> & BoardClient
  updatedFields: () => Promise<string[] | null>
  previousValues: () => Promise<BoardPreviousValuesResponse | null> & BoardPreviousValuesClient
}

export interface BoardPreviousValuesClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
}

export interface PostSubscriptionPayloadClient extends Fragmentable {
  mutation: () => Promise<MutationType>
  node: () => Promise<PostResponse | null> & PostClient
  updatedFields: () => Promise<string[] | null>
  previousValues: () => Promise<PostPreviousValuesResponse | null> & PostPreviousValuesClient
}

export interface PostPreviousValuesClient extends Fragmentable {
  id: () => Promise<string>
  content: () => Promise<string | null>
  createdAt: () => Promise<string>
  published: () => Promise<boolean>
  title: () => Promise<string>
  updatedAt: () => Promise<string>
}

export interface ThreadSubscriptionPayloadClient extends Fragmentable {
  mutation: () => Promise<MutationType>
  node: () => Promise<ThreadResponse | null> & ThreadClient
  updatedFields: () => Promise<string[] | null>
  previousValues: () => Promise<ThreadPreviousValuesResponse | null> & ThreadPreviousValuesClient
}

export interface ThreadPreviousValuesClient extends Fragmentable {
  id: () => Promise<string>
  createdAt: () => Promise<string>
  name: () => Promise<string>
}

export interface UserSubscriptionPayloadClient extends Fragmentable {
  mutation: () => Promise<MutationType>
  node: () => Promise<UserResponse | null> & UserClient
  updatedFields: () => Promise<string[] | null>
  previousValues: () => Promise<UserPreviousValuesResponse | null> & UserPreviousValuesClient
}

export interface UserPreviousValuesClient extends Fragmentable {
  id: () => Promise<string>
  nationality: () => Promise<string | null>
  email: () => Promise<string>
  name: () => Promise<string | null>
}

"
`;

exports[`generate client on prisma props > print client index (boilerplate) 1`] = `
"/*
 *
 * Code generated by Graphql Client Generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run 'something' to update it.
 * For more information, please read the docs: https://doclink.com/
 *
 */

import {
  QueryClient,
  MutationClient,
  SubscriptionClient
} from './clients'

export * from './clients'
export * from './responses'
export * from './types'
export * from './typedefs'

export interface ClientProxy {
  query: QueryClient
  mutation: MutationClient
  subscription: SubscriptionClient
}

"
`;

exports[`generate client on prisma props > print client responses 1`] = `
"/*
 *
 * Code generated by Graphql Client Generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run 'something' to update it.
 * For more information, please read the docs: https://doclink.com/
 *
 */

/*
 *
 * Responses
 *
 */

export type BoardResponse = BoardFlat & {
  admins?: UserFlat & {
    posts?: PostFlat
  }
  members?: UserFlat & {
    posts?: PostFlat
  }
  threads?: ThreadFlat & {
    author: UserFlat & {
      posts?: PostFlat
    }
    entry: PostFlat & {
      author: UserFlat
    }
    replies?: PostFlat & {
      author: UserFlat
    }
  }
}

export type UserResponse = UserFlat & {
  posts?: PostFlat
}

export type PostResponse = PostFlat & {
  author: UserFlat
}

export type ThreadResponse = ThreadFlat & {
  author: UserFlat & {
    posts?: PostFlat
  }
  entry: PostFlat & {
    author: UserFlat
  }
  replies?: PostFlat & {
    author: UserFlat
  }
}

export type BoardConnectionResponse = BoardConnectionFlat & {
  pageInfo: PageInfoFlat
  edges: BoardEdgeFlat & {
    node: BoardFlat & {
      admins?: UserFlat
      members?: UserFlat
      threads?: ThreadFlat
    }
  }
  aggregate: AggregateBoardFlat
}

export type PageInfoResponse = PageInfoFlat

export type BoardEdgeResponse = BoardEdgeFlat & {
  node: BoardFlat & {
    admins?: UserFlat & {
      posts?: PostFlat
    }
    members?: UserFlat & {
      posts?: PostFlat
    }
    threads?: ThreadFlat & {
      author: UserFlat
      entry: PostFlat
      replies?: PostFlat
    }
  }
}

export type AggregateBoardResponse = AggregateBoardFlat

export type PostConnectionResponse = PostConnectionFlat & {
  pageInfo: PageInfoFlat
  edges: PostEdgeFlat & {
    node: PostFlat & {
      author: UserFlat
    }
  }
  aggregate: AggregatePostFlat
}

export type PostEdgeResponse = PostEdgeFlat & {
  node: PostFlat & {
    author: UserFlat
  }
}

export type AggregatePostResponse = AggregatePostFlat

export type ThreadConnectionResponse = ThreadConnectionFlat & {
  pageInfo: PageInfoFlat
  edges: ThreadEdgeFlat & {
    node: ThreadFlat & {
      author: UserFlat
      entry: PostFlat
      replies?: PostFlat
    }
  }
  aggregate: AggregateThreadFlat
}

export type ThreadEdgeResponse = ThreadEdgeFlat & {
  node: ThreadFlat & {
    author: UserFlat & {
      posts?: PostFlat
    }
    entry: PostFlat & {
      author: UserFlat
    }
    replies?: PostFlat & {
      author: UserFlat
    }
  }
}

export type AggregateThreadResponse = AggregateThreadFlat

export type UserConnectionResponse = UserConnectionFlat & {
  pageInfo: PageInfoFlat
  edges: UserEdgeFlat & {
    node: UserFlat & {
      posts?: PostFlat
    }
  }
  aggregate: AggregateUserFlat
}

export type UserEdgeResponse = UserEdgeFlat & {
  node: UserFlat & {
    posts?: PostFlat
  }
}

export type AggregateUserResponse = AggregateUserFlat

export type NodeResponse = NodeFlat

export type BatchPayloadResponse = BatchPayloadFlat

export type BoardSubscriptionPayloadResponse = BoardSubscriptionPayloadFlat & {
  node?: BoardFlat & {
    admins?: UserFlat & {
      posts?: PostFlat
    }
    members?: UserFlat & {
      posts?: PostFlat
    }
    threads?: ThreadFlat & {
      author: UserFlat
      entry: PostFlat
      replies?: PostFlat
    }
  }
  previousValues?: BoardPreviousValuesFlat
}

export type BoardPreviousValuesResponse = BoardPreviousValuesFlat

export type PostSubscriptionPayloadResponse = PostSubscriptionPayloadFlat & {
  node?: PostFlat & {
    author: UserFlat
  }
  previousValues?: PostPreviousValuesFlat
}

export type PostPreviousValuesResponse = PostPreviousValuesFlat

export type ThreadSubscriptionPayloadResponse = ThreadSubscriptionPayloadFlat & {
  node?: ThreadFlat & {
    author: UserFlat & {
      posts?: PostFlat
    }
    entry: PostFlat & {
      author: UserFlat
    }
    replies?: PostFlat & {
      author: UserFlat
    }
  }
  previousValues?: ThreadPreviousValuesFlat
}

export type ThreadPreviousValuesResponse = ThreadPreviousValuesFlat

export type UserSubscriptionPayloadResponse = UserSubscriptionPayloadFlat & {
  node?: UserFlat & {
    posts?: PostFlat
  }
  previousValues?: UserPreviousValuesFlat
}

export type UserPreviousValuesResponse = UserPreviousValuesFlat

/*
 *
 * Fragments
 *
 */

export type BoardFlat = {
  id: string
  createdAt: string
}

export type UserFlat = {
  id: string
  nationality?: string | null
  email: string
  name?: string | null
}

export type PostFlat = {
  id: string
  content?: string | null
  createdAt: string
  published: boolean
  title: string
  updatedAt: string
}

export type ThreadFlat = {
  id: string
  createdAt: string
  name: string
}

export type BoardConnectionFlat = 

export type PageInfoFlat = {
  hasNextPage: boolean
  hasPreviousPage: boolean
  startCursor?: string | null
  endCursor?: string | null
}

export type BoardEdgeFlat = {
  cursor: string
}

export type AggregateBoardFlat = {
  count: number
}

export type PostConnectionFlat = 

export type PostEdgeFlat = {
  cursor: string
}

export type AggregatePostFlat = {
  count: number
}

export type ThreadConnectionFlat = 

export type ThreadEdgeFlat = {
  cursor: string
}

export type AggregateThreadFlat = {
  count: number
}

export type UserConnectionFlat = 

export type UserEdgeFlat = {
  cursor: string
}

export type AggregateUserFlat = {
  count: number
}

export type NodeFlat = {
  id: string
}

export type BatchPayloadFlat = {
  count: number
}

export type BoardSubscriptionPayloadFlat = {
  mutation: MutationType
  updatedFields?: string[] | null
}

export type BoardPreviousValuesFlat = {
  id: string
  createdAt: string
}

export type PostSubscriptionPayloadFlat = {
  mutation: MutationType
  updatedFields?: string[] | null
}

export type PostPreviousValuesFlat = {
  id: string
  content?: string | null
  createdAt: string
  published: boolean
  title: string
  updatedAt: string
}

export type ThreadSubscriptionPayloadFlat = {
  mutation: MutationType
  updatedFields?: string[] | null
}

export type ThreadPreviousValuesFlat = {
  id: string
  createdAt: string
  name: string
}

export type UserSubscriptionPayloadFlat = {
  mutation: MutationType
  updatedFields?: string[] | null
}

export type UserPreviousValuesFlat = {
  id: string
  nationality?: string | null
  email: string
  name?: string | null
}

"
`;

exports[`generate client on prisma props > print client typedefs 1`] = `
"/*
 *
 * Code generated by Graphql Client Generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run 'something' to update it.
 * For more information, please read the docs: https://doclink.com/
 *
 */

/*
 *
 * Client Runtime TypeDefs
 *
 */

export const  TYPEDEFS = {
  kind: \\"Document\\",
  definitions: [
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"AggregateBoard\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"count\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Int\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"AggregatePost\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"count\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Int\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"AggregateThread\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"count\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Int\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"AggregateUser\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"count\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Int\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"BatchPayload\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"count\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Long\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Board\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"createdAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"DateTime\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"admins\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NonNullType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"User\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"members\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NonNullType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"User\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"threads\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"ThreadWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"ThreadOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NonNullType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Thread\\"
                }
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"BoardConnection\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"pageInfo\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"PageInfo\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"edges\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"ListType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"BoardEdge\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"aggregate\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"AggregateBoard\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"BoardEdge\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"node\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Board\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"cursor\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"BoardPreviousValues\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"createdAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"DateTime\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"BoardSubscriptionPayload\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"mutation\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"MutationType\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"node\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Board\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updatedFields\\"
          },
          arguments: [],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NonNullType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"previousValues\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"BoardPreviousValues\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Mutation\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"createBoard\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"data\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"BoardCreateInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Board\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updateBoard\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"data\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"BoardUpdateInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"BoardWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Board\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"upsertBoard\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"BoardWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"create\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"BoardCreateInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"update\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"BoardUpdateInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Board\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"deleteBoard\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"BoardWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Board\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"deleteManyBoards\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"BoardWhereInput\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"BatchPayload\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"createPost\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"data\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"PostCreateInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Post\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updatePost\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"data\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"PostUpdateInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"PostWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Post\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updateManyPosts\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"data\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"PostUpdateManyMutationInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostWhereInput\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"BatchPayload\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"upsertPost\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"PostWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"create\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"PostCreateInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"update\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"PostUpdateInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Post\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"deletePost\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"PostWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Post\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"deleteManyPosts\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostWhereInput\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"BatchPayload\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"createThread\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"data\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ThreadCreateInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Thread\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updateThread\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"data\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ThreadUpdateInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ThreadWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Thread\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updateManyThreads\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"data\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ThreadUpdateManyMutationInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"ThreadWhereInput\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"BatchPayload\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"upsertThread\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ThreadWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"create\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ThreadCreateInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"update\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ThreadUpdateInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Thread\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"deleteThread\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ThreadWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Thread\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"deleteManyThreads\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"ThreadWhereInput\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"BatchPayload\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"createUser\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"data\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"UserCreateInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"User\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updateUser\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"data\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"UserUpdateInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"UserWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"User\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updateManyUsers\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"data\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"UserUpdateManyMutationInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserWhereInput\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"BatchPayload\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"upsertUser\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"UserWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"create\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"UserCreateInput\\"
                  }
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"update\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"UserUpdateInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"User\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"deleteUser\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"UserWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"User\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"deleteManyUsers\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserWhereInput\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"BatchPayload\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"InterfaceTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Node\\"
      },
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"PageInfo\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"hasNextPage\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Boolean\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"hasPreviousPage\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Boolean\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"startCursor\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"endCursor\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Post\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"author\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"User\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"content\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"createdAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"DateTime\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"published\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Boolean\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"title\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updatedAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"DateTime\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"PostConnection\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"pageInfo\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"PageInfo\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"edges\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"ListType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostEdge\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"aggregate\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"AggregatePost\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"PostEdge\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"node\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Post\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"cursor\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"PostPreviousValues\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"content\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"createdAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"DateTime\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"published\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Boolean\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"title\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updatedAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"DateTime\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"PostSubscriptionPayload\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"mutation\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"MutationType\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"node\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Post\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updatedFields\\"
          },
          arguments: [],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NonNullType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"previousValues\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"PostPreviousValues\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Query\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"board\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"BoardWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Board\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"boards\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"BoardWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"BoardOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"ListType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Board\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"boardsConnection\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"BoardWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"BoardOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"BoardConnection\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"post\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"PostWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Post\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"posts\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"ListType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Post\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"postsConnection\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"PostConnection\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"thread\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ThreadWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Thread\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"threads\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"ThreadWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"ThreadOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"ListType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Thread\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"threadsConnection\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"ThreadWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"ThreadOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ThreadConnection\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"user\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"UserWhereUniqueInput\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"User\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"users\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"ListType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"User\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"usersConnection\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"UserConnection\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"node\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"id\\"
              },
              type: {
                kind: \\"NonNullType\\",
                type: {
                  kind: \\"NamedType\\",
                  name: {
                    kind: \\"Name\\",
                    value: \\"ID\\"
                  }
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Node\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Subscription\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"board\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"BoardSubscriptionWhereInput\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"BoardSubscriptionPayload\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"post\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostSubscriptionWhereInput\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"PostSubscriptionPayload\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"thread\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"ThreadSubscriptionWhereInput\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"ThreadSubscriptionPayload\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"user\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserSubscriptionWhereInput\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"UserSubscriptionPayload\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"Thread\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"createdAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"DateTime\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"author\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"User\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"entry\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Post\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"replies\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NonNullType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Post\\"
                }
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"ThreadConnection\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"pageInfo\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"PageInfo\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"edges\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"ListType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"ThreadEdge\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"aggregate\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"AggregateThread\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"ThreadEdge\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"node\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"Thread\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"cursor\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"ThreadPreviousValues\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"createdAt\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"DateTime\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"ThreadSubscriptionPayload\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"mutation\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"MutationType\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"node\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"Thread\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updatedFields\\"
          },
          arguments: [],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NonNullType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"previousValues\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"ThreadPreviousValues\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"User\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"nationality\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"email\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"posts\\"
          },
          arguments: [
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"where\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostWhereInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"orderBy\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"PostOrderByInput\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"skip\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"after\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"before\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"first\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            },
            {
              kind: \\"InputValueDefinition\\",
              name: {
                kind: \\"Name\\",
                value: \\"last\\"
              },
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Int\\"
                }
              },
              directives: []
            }
          ],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NonNullType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"Post\\"
                }
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"UserConnection\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"pageInfo\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"PageInfo\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"edges\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"ListType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"UserEdge\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"aggregate\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"AggregateUser\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"UserEdge\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"node\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"User\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"cursor\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"UserPreviousValues\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"id\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"ID\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"nationality\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"email\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"String\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"name\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"String\\"
            }
          },
          directives: []
        }
      ]
    },
    {
      kind: \\"ObjectTypeDefinition\\",
      name: {
        kind: \\"Name\\",
        value: \\"UserSubscriptionPayload\\"
      },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"mutation\\"
          },
          arguments: [],
          type: {
            kind: \\"NonNullType\\",
            type: {
              kind: \\"NamedType\\",
              name: {
                kind: \\"Name\\",
                value: \\"MutationType\\"
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"node\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"User\\"
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"updatedFields\\"
          },
          arguments: [],
          type: {
            kind: \\"ListType\\",
            type: {
              kind: \\"NonNullType\\",
              type: {
                kind: \\"NamedType\\",
                name: {
                  kind: \\"Name\\",
                  value: \\"String\\"
                }
              }
            }
          },
          directives: []
        },
        {
          kind: \\"FieldDefinition\\",
          name: {
            kind: \\"Name\\",
            value: \\"previousValues\\"
          },
          arguments: [],
          type: {
            kind: \\"NamedType\\",
            name: {
              kind: \\"Name\\",
              value: \\"UserPreviousValues\\"
            }
          },
          directives: []
        }
      ]
    }
  ]
}

"
`;

exports[`generate client on prisma props > print client types 1`] = `
"/*
 *
 * Code generated by Graphql Client Generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run 'something' to update it.
 * For more information, please read the docs: https://doclink.com/
 *
 */

/*
 *
 * ObjectTypeDefinition Typings
 *
 */

export interface AggregateBoard {
  __typename: 'AggregateBoard'
  count: number
}

export interface AggregatePost {
  __typename: 'AggregatePost'
  count: number
}

export interface AggregateThread {
  __typename: 'AggregateThread'
  count: number
}

export interface AggregateUser {
  __typename: 'AggregateUser'
  count: number
}

export interface BatchPayload {
  __typename: 'BatchPayload'
  count: number
}

export interface Board {
  __typename: 'Board'
  id: string
  createdAt: string
  admins?: User[] | null
  members?: User[] | null
  threads?: Thread[] | null
}

export interface BoardConnection {
  __typename: 'BoardConnection'
  pageInfo: PageInfo
  edges: Array<BoardEdge | null>
  aggregate: AggregateBoard
}

export interface BoardEdge {
  __typename: 'BoardEdge'
  node: Board
  cursor: string
}

export interface BoardPreviousValues {
  __typename: 'BoardPreviousValues'
  id: string
  createdAt: string
}

export interface BoardSubscriptionPayload {
  __typename: 'BoardSubscriptionPayload'
  mutation: MutationType
  node?: Board | null
  updatedFields?: string[] | null
  previousValues?: BoardPreviousValues | null
}

export interface Mutation {
  __typename: 'Mutation'
  createBoard: Board
  updateBoard?: Board | null
  upsertBoard: Board
  deleteBoard?: Board | null
  deleteManyBoards: BatchPayload
  createPost: Post
  updatePost?: Post | null
  updateManyPosts: BatchPayload
  upsertPost: Post
  deletePost?: Post | null
  deleteManyPosts: BatchPayload
  createThread: Thread
  updateThread?: Thread | null
  updateManyThreads: BatchPayload
  upsertThread: Thread
  deleteThread?: Thread | null
  deleteManyThreads: BatchPayload
  createUser: User
  updateUser?: User | null
  updateManyUsers: BatchPayload
  upsertUser: User
  deleteUser?: User | null
  deleteManyUsers: BatchPayload
}

export interface PageInfo {
  __typename: 'PageInfo'
  hasNextPage: boolean
  hasPreviousPage: boolean
  startCursor?: string | null
  endCursor?: string | null
}

export interface Post {
  __typename: 'Post'
  id: string
  author: User
  content?: string | null
  createdAt: string
  published: boolean
  title: string
  updatedAt: string
}

export interface PostConnection {
  __typename: 'PostConnection'
  pageInfo: PageInfo
  edges: Array<PostEdge | null>
  aggregate: AggregatePost
}

export interface PostEdge {
  __typename: 'PostEdge'
  node: Post
  cursor: string
}

export interface PostPreviousValues {
  __typename: 'PostPreviousValues'
  id: string
  content?: string | null
  createdAt: string
  published: boolean
  title: string
  updatedAt: string
}

export interface PostSubscriptionPayload {
  __typename: 'PostSubscriptionPayload'
  mutation: MutationType
  node?: Post | null
  updatedFields?: string[] | null
  previousValues?: PostPreviousValues | null
}

export interface Query {
  __typename: 'Query'
  board?: Board | null
  boards: Array<Board | null>
  boardsConnection: BoardConnection
  post?: Post | null
  posts: Array<Post | null>
  postsConnection: PostConnection
  thread?: Thread | null
  threads: Array<Thread | null>
  threadsConnection: ThreadConnection
  user?: User | null
  users: Array<User | null>
  usersConnection: UserConnection
  node?: Node | null
}

export interface Subscription {
  __typename: 'Subscription'
  board?: BoardSubscriptionPayload | null
  post?: PostSubscriptionPayload | null
  thread?: ThreadSubscriptionPayload | null
  user?: UserSubscriptionPayload | null
}

export interface Thread {
  __typename: 'Thread'
  id: string
  createdAt: string
  author: User
  name: string
  entry: Post
  replies?: Post[] | null
}

export interface ThreadConnection {
  __typename: 'ThreadConnection'
  pageInfo: PageInfo
  edges: Array<ThreadEdge | null>
  aggregate: AggregateThread
}

export interface ThreadEdge {
  __typename: 'ThreadEdge'
  node: Thread
  cursor: string
}

export interface ThreadPreviousValues {
  __typename: 'ThreadPreviousValues'
  id: string
  createdAt: string
  name: string
}

export interface ThreadSubscriptionPayload {
  __typename: 'ThreadSubscriptionPayload'
  mutation: MutationType
  node?: Thread | null
  updatedFields?: string[] | null
  previousValues?: ThreadPreviousValues | null
}

export interface User {
  __typename: 'User'
  id: string
  nationality?: string | null
  email: string
  name?: string | null
  posts?: Post[] | null
}

export interface UserConnection {
  __typename: 'UserConnection'
  pageInfo: PageInfo
  edges: Array<UserEdge | null>
  aggregate: AggregateUser
}

export interface UserEdge {
  __typename: 'UserEdge'
  node: User
  cursor: string
}

export interface UserPreviousValues {
  __typename: 'UserPreviousValues'
  id: string
  nationality?: string | null
  email: string
  name?: string | null
}

export interface UserSubscriptionPayload {
  __typename: 'UserSubscriptionPayload'
  mutation: MutationType
  node?: User | null
  updatedFields?: string[] | null
  previousValues?: UserPreviousValues | null
}



/*
 *
 * InputObjectTypeDefinition Typings
 *
 */

export interface BoardCreateInput {
  admins?: UserCreateManyInput | null
  members?: UserCreateManyInput | null
  threads?: ThreadCreateManyInput | null
}

export interface BoardSubscriptionWhereInput {
  mutation_in?: MutationType[] | null
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[] | null
  updatedFields_contains_some?: string[] | null
  node?: BoardWhereInput | null
  AND?: BoardSubscriptionWhereInput[] | null
  OR?: BoardSubscriptionWhereInput[] | null
  NOT?: BoardSubscriptionWhereInput[] | null
}

export interface BoardUpdateInput {
  admins?: UserUpdateManyInput | null
  members?: UserUpdateManyInput | null
  threads?: ThreadUpdateManyInput | null
}

export interface BoardWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[] | null
  id_not_in?: string[] | null
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[] | null
  createdAt_not_in?: string[] | null
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  admins_every?: UserWhereInput | null
  admins_some?: UserWhereInput | null
  admins_none?: UserWhereInput | null
  members_every?: UserWhereInput | null
  members_some?: UserWhereInput | null
  members_none?: UserWhereInput | null
  threads_every?: ThreadWhereInput | null
  threads_some?: ThreadWhereInput | null
  threads_none?: ThreadWhereInput | null
  AND?: BoardWhereInput[] | null
  OR?: BoardWhereInput[] | null
  NOT?: BoardWhereInput[] | null
}

export interface BoardWhereUniqueInput {
  id?: string | null
}

export interface PostCreateInput {
  author: UserCreateOneWithoutPostsInput
  content?: string | null
  published: boolean
  title: string
}

export interface PostCreateManyInput {
  create?: PostCreateInput[] | null
  connect?: PostWhereUniqueInput[] | null
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | null
  connect?: PostWhereUniqueInput[] | null
}

export interface PostCreateOneInput {
  create?: PostCreateInput | null
  connect?: PostWhereUniqueInput | null
}

export interface PostCreateWithoutAuthorInput {
  content?: string | null
  published: boolean
  title: string
}

export interface PostScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[] | null
  id_not_in?: string[] | null
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[] | null
  content_not_in?: string[] | null
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[] | null
  createdAt_not_in?: string[] | null
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  published?: boolean | null
  published_not?: boolean | null
  title?: string | null
  title_not?: string | null
  title_in?: string[] | null
  title_not_in?: string[] | null
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[] | null
  updatedAt_not_in?: string[] | null
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PostScalarWhereInput[] | null
  OR?: PostScalarWhereInput[] | null
  NOT?: PostScalarWhereInput[] | null
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | null
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[] | null
  updatedFields_contains_some?: string[] | null
  node?: PostWhereInput | null
  AND?: PostSubscriptionWhereInput[] | null
  OR?: PostSubscriptionWhereInput[] | null
  NOT?: PostSubscriptionWhereInput[] | null
}

export interface PostUpdateDataInput {
  author?: UserUpdateOneRequiredWithoutPostsInput | null
  content?: string | null
  published?: boolean | null
  title?: string | null
}

export interface PostUpdateInput {
  author?: UserUpdateOneRequiredWithoutPostsInput | null
  content?: string | null
  published?: boolean | null
  title?: string | null
}

export interface PostUpdateManyDataInput {
  content?: string | null
  published?: boolean | null
  title?: string | null
}

export interface PostUpdateManyInput {
  create?: PostCreateInput[] | null
  update?: PostUpdateWithWhereUniqueNestedInput[] | null
  upsert?: PostUpsertWithWhereUniqueNestedInput[] | null
  delete?: PostWhereUniqueInput[] | null
  connect?: PostWhereUniqueInput[] | null
  set?: PostWhereUniqueInput[] | null
  disconnect?: PostWhereUniqueInput[] | null
  deleteMany?: PostScalarWhereInput[] | null
  updateMany?: PostUpdateManyWithWhereNestedInput[] | null
}

export interface PostUpdateManyMutationInput {
  content?: string | null
  published?: boolean | null
  title?: string | null
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | null
  delete?: PostWhereUniqueInput[] | null
  connect?: PostWhereUniqueInput[] | null
  set?: PostWhereUniqueInput[] | null
  disconnect?: PostWhereUniqueInput[] | null
  update?: PostUpdateWithWhereUniqueWithoutAuthorInput[] | null
  upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput[] | null
  deleteMany?: PostScalarWhereInput[] | null
  updateMany?: PostUpdateManyWithWhereNestedInput[] | null
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput
  data: PostUpdateManyDataInput
}

export interface PostUpdateOneRequiredInput {
  create?: PostCreateInput | null
  update?: PostUpdateDataInput | null
  upsert?: PostUpsertNestedInput | null
  connect?: PostWhereUniqueInput | null
}

export interface PostUpdateWithoutAuthorDataInput {
  content?: string | null
  published?: boolean | null
  title?: string | null
}

export interface PostUpdateWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput
  data: PostUpdateDataInput
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput
  data: PostUpdateWithoutAuthorDataInput
}

export interface PostUpsertNestedInput {
  update: PostUpdateDataInput
  create: PostCreateInput
}

export interface PostUpsertWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput
  update: PostUpdateDataInput
  create: PostCreateInput
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput
  update: PostUpdateWithoutAuthorDataInput
  create: PostCreateWithoutAuthorInput
}

export interface PostWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[] | null
  id_not_in?: string[] | null
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  author?: UserWhereInput | null
  content?: string | null
  content_not?: string | null
  content_in?: string[] | null
  content_not_in?: string[] | null
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[] | null
  createdAt_not_in?: string[] | null
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  published?: boolean | null
  published_not?: boolean | null
  title?: string | null
  title_not?: string | null
  title_in?: string[] | null
  title_not_in?: string[] | null
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[] | null
  updatedAt_not_in?: string[] | null
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PostWhereInput[] | null
  OR?: PostWhereInput[] | null
  NOT?: PostWhereInput[] | null
}

export interface PostWhereUniqueInput {
  id?: string | null
}

export interface ThreadCreateInput {
  author: UserCreateOneInput
  name: string
  entry: PostCreateOneInput
  replies?: PostCreateManyInput | null
}

export interface ThreadCreateManyInput {
  create?: ThreadCreateInput[] | null
  connect?: ThreadWhereUniqueInput[] | null
}

export interface ThreadScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[] | null
  id_not_in?: string[] | null
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[] | null
  createdAt_not_in?: string[] | null
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[] | null
  name_not_in?: string[] | null
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: ThreadScalarWhereInput[] | null
  OR?: ThreadScalarWhereInput[] | null
  NOT?: ThreadScalarWhereInput[] | null
}

export interface ThreadSubscriptionWhereInput {
  mutation_in?: MutationType[] | null
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[] | null
  updatedFields_contains_some?: string[] | null
  node?: ThreadWhereInput | null
  AND?: ThreadSubscriptionWhereInput[] | null
  OR?: ThreadSubscriptionWhereInput[] | null
  NOT?: ThreadSubscriptionWhereInput[] | null
}

export interface ThreadUpdateDataInput {
  author?: UserUpdateOneRequiredInput | null
  name?: string | null
  entry?: PostUpdateOneRequiredInput | null
  replies?: PostUpdateManyInput | null
}

export interface ThreadUpdateInput {
  author?: UserUpdateOneRequiredInput | null
  name?: string | null
  entry?: PostUpdateOneRequiredInput | null
  replies?: PostUpdateManyInput | null
}

export interface ThreadUpdateManyDataInput {
  name?: string | null
}

export interface ThreadUpdateManyInput {
  create?: ThreadCreateInput[] | null
  update?: ThreadUpdateWithWhereUniqueNestedInput[] | null
  upsert?: ThreadUpsertWithWhereUniqueNestedInput[] | null
  delete?: ThreadWhereUniqueInput[] | null
  connect?: ThreadWhereUniqueInput[] | null
  set?: ThreadWhereUniqueInput[] | null
  disconnect?: ThreadWhereUniqueInput[] | null
  deleteMany?: ThreadScalarWhereInput[] | null
  updateMany?: ThreadUpdateManyWithWhereNestedInput[] | null
}

export interface ThreadUpdateManyMutationInput {
  name?: string | null
}

export interface ThreadUpdateManyWithWhereNestedInput {
  where: ThreadScalarWhereInput
  data: ThreadUpdateManyDataInput
}

export interface ThreadUpdateWithWhereUniqueNestedInput {
  where: ThreadWhereUniqueInput
  data: ThreadUpdateDataInput
}

export interface ThreadUpsertWithWhereUniqueNestedInput {
  where: ThreadWhereUniqueInput
  update: ThreadUpdateDataInput
  create: ThreadCreateInput
}

export interface ThreadWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[] | null
  id_not_in?: string[] | null
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[] | null
  createdAt_not_in?: string[] | null
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  author?: UserWhereInput | null
  name?: string | null
  name_not?: string | null
  name_in?: string[] | null
  name_not_in?: string[] | null
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  entry?: PostWhereInput | null
  replies_every?: PostWhereInput | null
  replies_some?: PostWhereInput | null
  replies_none?: PostWhereInput | null
  AND?: ThreadWhereInput[] | null
  OR?: ThreadWhereInput[] | null
  NOT?: ThreadWhereInput[] | null
}

export interface ThreadWhereUniqueInput {
  id?: string | null
}

export interface UserCreateInput {
  nationality?: string | null
  email: string
  name?: string | null
  posts?: PostCreateManyWithoutAuthorInput | null
}

export interface UserCreateManyInput {
  create?: UserCreateInput[] | null
  connect?: UserWhereUniqueInput[] | null
}

export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  connect?: UserWhereUniqueInput | null
}

export interface UserCreateWithoutPostsInput {
  nationality?: string | null
  email: string
  name?: string | null
}

export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[] | null
  id_not_in?: string[] | null
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  nationality?: string | null
  nationality_not?: string | null
  nationality_in?: string[] | null
  nationality_not_in?: string[] | null
  nationality_lt?: string | null
  nationality_lte?: string | null
  nationality_gt?: string | null
  nationality_gte?: string | null
  nationality_contains?: string | null
  nationality_not_contains?: string | null
  nationality_starts_with?: string | null
  nationality_not_starts_with?: string | null
  nationality_ends_with?: string | null
  nationality_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[] | null
  email_not_in?: string[] | null
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[] | null
  name_not_in?: string[] | null
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: UserScalarWhereInput[] | null
  OR?: UserScalarWhereInput[] | null
  NOT?: UserScalarWhereInput[] | null
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | null
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[] | null
  updatedFields_contains_some?: string[] | null
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[] | null
  OR?: UserSubscriptionWhereInput[] | null
  NOT?: UserSubscriptionWhereInput[] | null
}

export interface UserUpdateDataInput {
  nationality?: string | null
  email?: string | null
  name?: string | null
  posts?: PostUpdateManyWithoutAuthorInput | null
}

export interface UserUpdateInput {
  nationality?: string | null
  email?: string | null
  name?: string | null
  posts?: PostUpdateManyWithoutAuthorInput | null
}

export interface UserUpdateManyDataInput {
  nationality?: string | null
  email?: string | null
  name?: string | null
}

export interface UserUpdateManyInput {
  create?: UserCreateInput[] | null
  update?: UserUpdateWithWhereUniqueNestedInput[] | null
  upsert?: UserUpsertWithWhereUniqueNestedInput[] | null
  delete?: UserWhereUniqueInput[] | null
  connect?: UserWhereUniqueInput[] | null
  set?: UserWhereUniqueInput[] | null
  disconnect?: UserWhereUniqueInput[] | null
  deleteMany?: UserScalarWhereInput[] | null
  updateMany?: UserUpdateManyWithWhereNestedInput[] | null
}

export interface UserUpdateManyMutationInput {
  nationality?: string | null
  email?: string | null
  name?: string | null
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput
  data: UserUpdateManyDataInput
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  connect?: UserWhereUniqueInput | null
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  update?: UserUpdateWithoutPostsDataInput | null
  upsert?: UserUpsertWithoutPostsInput | null
  connect?: UserWhereUniqueInput | null
}

export interface UserUpdateWithoutPostsDataInput {
  nationality?: string | null
  email?: string | null
  name?: string | null
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput
  data: UserUpdateDataInput
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput
  create: UserCreateInput
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput
  create: UserCreateWithoutPostsInput
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput
  update: UserUpdateDataInput
  create: UserCreateInput
}

export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[] | null
  id_not_in?: string[] | null
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  nationality?: string | null
  nationality_not?: string | null
  nationality_in?: string[] | null
  nationality_not_in?: string[] | null
  nationality_lt?: string | null
  nationality_lte?: string | null
  nationality_gt?: string | null
  nationality_gte?: string | null
  nationality_contains?: string | null
  nationality_not_contains?: string | null
  nationality_starts_with?: string | null
  nationality_not_starts_with?: string | null
  nationality_ends_with?: string | null
  nationality_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[] | null
  email_not_in?: string[] | null
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[] | null
  name_not_in?: string[] | null
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  posts_every?: PostWhereInput | null
  posts_some?: PostWhereInput | null
  posts_none?: PostWhereInput | null
  AND?: UserWhereInput[] | null
  OR?: UserWhereInput[] | null
  NOT?: UserWhereInput[] | null
}

export interface UserWhereUniqueInput {
  id?: string | null
}



/*
 *
 * EnumTypeDefinition Typings
 *
 */

export interface BoardOrderByInput {
  id_ASC: 'id_ASC'
  id_DESC: 'id_DESC'
  createdAt_ASC: 'createdAt_ASC'
  createdAt_DESC: 'createdAt_DESC'
  updatedAt_ASC: 'updatedAt_ASC'
  updatedAt_DESC: 'updatedAt_DESC'
}

export const BoardOrderByInput: BoardOrderByInput = {
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  createdAt_ASC: 'createdAt_ASC',
  createdAt_DESC: 'createdAt_DESC',
  updatedAt_ASC: 'updatedAt_ASC',
  updatedAt_DESC: 'updatedAt_DESC',
}

export interface MutationType {
  CREATED: 'CREATED'
  UPDATED: 'UPDATED'
  DELETED: 'DELETED'
}

export const MutationType: MutationType = {
  CREATED: 'CREATED',
  UPDATED: 'UPDATED',
  DELETED: 'DELETED',
}

export interface PostOrderByInput {
  id_ASC: 'id_ASC'
  id_DESC: 'id_DESC'
  content_ASC: 'content_ASC'
  content_DESC: 'content_DESC'
  createdAt_ASC: 'createdAt_ASC'
  createdAt_DESC: 'createdAt_DESC'
  published_ASC: 'published_ASC'
  published_DESC: 'published_DESC'
  title_ASC: 'title_ASC'
  title_DESC: 'title_DESC'
  updatedAt_ASC: 'updatedAt_ASC'
  updatedAt_DESC: 'updatedAt_DESC'
}

export const PostOrderByInput: PostOrderByInput = {
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  content_ASC: 'content_ASC',
  content_DESC: 'content_DESC',
  createdAt_ASC: 'createdAt_ASC',
  createdAt_DESC: 'createdAt_DESC',
  published_ASC: 'published_ASC',
  published_DESC: 'published_DESC',
  title_ASC: 'title_ASC',
  title_DESC: 'title_DESC',
  updatedAt_ASC: 'updatedAt_ASC',
  updatedAt_DESC: 'updatedAt_DESC',
}

export interface ThreadOrderByInput {
  id_ASC: 'id_ASC'
  id_DESC: 'id_DESC'
  createdAt_ASC: 'createdAt_ASC'
  createdAt_DESC: 'createdAt_DESC'
  name_ASC: 'name_ASC'
  name_DESC: 'name_DESC'
  updatedAt_ASC: 'updatedAt_ASC'
  updatedAt_DESC: 'updatedAt_DESC'
}

export const ThreadOrderByInput: ThreadOrderByInput = {
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  createdAt_ASC: 'createdAt_ASC',
  createdAt_DESC: 'createdAt_DESC',
  name_ASC: 'name_ASC',
  name_DESC: 'name_DESC',
  updatedAt_ASC: 'updatedAt_ASC',
  updatedAt_DESC: 'updatedAt_DESC',
}

export interface UserOrderByInput {
  id_ASC: 'id_ASC'
  id_DESC: 'id_DESC'
  nationality_ASC: 'nationality_ASC'
  nationality_DESC: 'nationality_DESC'
  email_ASC: 'email_ASC'
  email_DESC: 'email_DESC'
  name_ASC: 'name_ASC'
  name_DESC: 'name_DESC'
  createdAt_ASC: 'createdAt_ASC'
  createdAt_DESC: 'createdAt_DESC'
  updatedAt_ASC: 'updatedAt_ASC'
  updatedAt_DESC: 'updatedAt_DESC'
}

export const UserOrderByInput: UserOrderByInput = {
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  nationality_ASC: 'nationality_ASC',
  nationality_DESC: 'nationality_DESC',
  email_ASC: 'email_ASC',
  email_DESC: 'email_DESC',
  name_ASC: 'name_ASC',
  name_DESC: 'name_DESC',
  createdAt_ASC: 'createdAt_ASC',
  createdAt_DESC: 'createdAt_DESC',
  updatedAt_ASC: 'updatedAt_ASC',
  updatedAt_DESC: 'updatedAt_DESC',
}



/*
 *
 * ScalarTypeDefinition Typings
 *
 */

export type DateTime = string

export type Long = any



/*
 *
 * InterfaceTypeDefinition Typings
 *
 */

export interface Node {
  id: string
}



"
`;
