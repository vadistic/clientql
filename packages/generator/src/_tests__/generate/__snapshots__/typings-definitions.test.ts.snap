// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate typings > definitions match snapshot 1`] = `
"/*
 *
 * ROOT TYPES
 *
 */

export interface IGraphQLMutation {
  __typename: 'Mutation'
  createPost: IGraphQLPost
  createUser: IGraphQLUser
  deleteManyPosts: IGraphQLBatchPayload
  deleteManyUsers: IGraphQLBatchPayload
  deletePost?: IGraphQLPost | null
  deleteUser?: IGraphQLUser | null
  updateManyPosts: IGraphQLBatchPayload
  updateManyUsers: IGraphQLBatchPayload
  updatePost?: IGraphQLPost | null
  updateUser?: IGraphQLUser | null
  upsertPost: IGraphQLPost
  upsertUser: IGraphQLUser
}

export interface IGraphQLQuery {
  __typename: 'Query'
  node?: IGraphQLNode | null
  post?: IGraphQLPost | null
  posts: Array<IGraphQLPost>
  postsConnection: IGraphQLPostConnection
  user?: IGraphQLUser | null
  users: Array<IGraphQLUser>
  usersConnection: IGraphQLUserConnection
}

/*
 *
 * OBJECT TYPES
 *
 */

export interface IGraphQLAggregatePost {
  __typename: 'AggregatePost'
  count: number
}

export interface IGraphQLAggregateUser {
  __typename: 'AggregateUser'
  count: number
}

export interface IGraphQLBatchPayload {
  __typename: 'BatchPayload'
  count: number
}

export interface IGraphQLPageInfo {
  __typename: 'PageInfo'
  endCursor?: string | null
  hasNextPage: boolean
  hasPreviousPage: boolean
  startCursor?: string | null
}

export interface IGraphQLPost {
  __typename: 'Post'
  author: IGraphQLUser
  content?: string | null
  createdAt: DateTime
  id: ID
  published: boolean
  title: string
  updatedAt: DateTime
}

export interface IGraphQLPostConnection {
  __typename: 'PostConnection'
  aggregate: IGraphQLAggregatePost
  edges: Array<IGraphQLPostEdge>
  pageInfo: IGraphQLPageInfo
}

export interface IGraphQLPostEdge {
  __typename: 'PostEdge'
  cursor: string
  node: IGraphQLPost
}

export interface IGraphQLUser {
  __typename: 'User'
  email: string
  id: ID
  name?: string | null
  posts?: Array<IGraphQLPost> | null
}

export interface IGraphQLUserConnection {
  __typename: 'UserConnection'
  aggregate: IGraphQLAggregateUser
  edges: Array<IGraphQLUserEdge>
  pageInfo: IGraphQLPageInfo
}

export interface IGraphQLUserEdge {
  __typename: 'UserEdge'
  cursor: string
  node: IGraphQLUser
}

/*
 *
 * INPUT OBJECT TYPES
 *
 */

export interface IGraphQLPostCreateInput {
  author: IGraphQLUserCreateOneWithoutPostsInput
  content?: string | null
  published?: boolean | null
  title: string
}

export interface IGraphQLPostCreateManyWithoutAuthorInput {
  connect?: Array<IGraphQLPostWhereUniqueInput> | null
  create?: Array<IGraphQLPostCreateWithoutAuthorInput> | null
}

export interface IGraphQLPostCreateWithoutAuthorInput {
  content?: string | null
  published?: boolean | null
  title: string
}

export interface IGraphQLPostScalarWhereInput {
  AND?: Array<IGraphQLPostScalarWhereInput> | null
  content?: string | null
  content_contains?: string | null
  content_ends_with?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_in?: string[] | null
  content_lt?: string | null
  content_lte?: string | null
  content_not?: string | null
  content_not_contains?: string | null
  content_not_ends_with?: string | null
  content_not_in?: string[] | null
  content_not_starts_with?: string | null
  content_starts_with?: string | null
  createdAt?: DateTime | null
  createdAt_gt?: DateTime | null
  createdAt_gte?: DateTime | null
  createdAt_in?: Array<DateTime> | null
  createdAt_lt?: DateTime | null
  createdAt_lte?: DateTime | null
  createdAt_not?: DateTime | null
  createdAt_not_in?: Array<DateTime> | null
  id?: ID | null
  id_contains?: ID | null
  id_ends_with?: ID | null
  id_gt?: ID | null
  id_gte?: ID | null
  id_in?: Array<ID> | null
  id_lt?: ID | null
  id_lte?: ID | null
  id_not?: ID | null
  id_not_contains?: ID | null
  id_not_ends_with?: ID | null
  id_not_in?: Array<ID> | null
  id_not_starts_with?: ID | null
  id_starts_with?: ID | null
  NOT?: Array<IGraphQLPostScalarWhereInput> | null
  OR?: Array<IGraphQLPostScalarWhereInput> | null
  published?: boolean | null
  published_not?: boolean | null
  title?: string | null
  title_contains?: string | null
  title_ends_with?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_in?: string[] | null
  title_lt?: string | null
  title_lte?: string | null
  title_not?: string | null
  title_not_contains?: string | null
  title_not_ends_with?: string | null
  title_not_in?: string[] | null
  title_not_starts_with?: string | null
  title_starts_with?: string | null
  updatedAt?: DateTime | null
  updatedAt_gt?: DateTime | null
  updatedAt_gte?: DateTime | null
  updatedAt_in?: Array<DateTime> | null
  updatedAt_lt?: DateTime | null
  updatedAt_lte?: DateTime | null
  updatedAt_not?: DateTime | null
  updatedAt_not_in?: Array<DateTime> | null
}

export interface IGraphQLPostUpdateInput {
  author?: IGraphQLUserUpdateOneRequiredWithoutPostsInput | null
  content?: string | null
  published?: boolean | null
  title?: string | null
}

export interface IGraphQLPostUpdateManyDataInput {
  content?: string | null
  published?: boolean | null
  title?: string | null
}

export interface IGraphQLPostUpdateManyMutationInput {
  content?: string | null
  published?: boolean | null
  title?: string | null
}

export interface IGraphQLPostUpdateManyWithoutAuthorInput {
  connect?: Array<IGraphQLPostWhereUniqueInput> | null
  create?: Array<IGraphQLPostCreateWithoutAuthorInput> | null
  delete?: Array<IGraphQLPostWhereUniqueInput> | null
  deleteMany?: Array<IGraphQLPostScalarWhereInput> | null
  disconnect?: Array<IGraphQLPostWhereUniqueInput> | null
  set?: Array<IGraphQLPostWhereUniqueInput> | null
  update?: Array<IGraphQLPostUpdateWithWhereUniqueWithoutAuthorInput> | null
  updateMany?: Array<IGraphQLPostUpdateManyWithWhereNestedInput> | null
  upsert?: Array<IGraphQLPostUpsertWithWhereUniqueWithoutAuthorInput> | null
}

export interface IGraphQLPostUpdateManyWithWhereNestedInput {
  data: IGraphQLPostUpdateManyDataInput
  where: IGraphQLPostScalarWhereInput
}

export interface IGraphQLPostUpdateWithoutAuthorDataInput {
  content?: string | null
  published?: boolean | null
  title?: string | null
}

export interface IGraphQLPostUpdateWithWhereUniqueWithoutAuthorInput {
  data: IGraphQLPostUpdateWithoutAuthorDataInput
  where: IGraphQLPostWhereUniqueInput
}

export interface IGraphQLPostUpsertWithWhereUniqueWithoutAuthorInput {
  create: IGraphQLPostCreateWithoutAuthorInput
  update: IGraphQLPostUpdateWithoutAuthorDataInput
  where: IGraphQLPostWhereUniqueInput
}

export interface IGraphQLPostWhereInput {
  AND?: Array<IGraphQLPostWhereInput> | null
  author?: IGraphQLUserWhereInput | null
  content?: string | null
  content_contains?: string | null
  content_ends_with?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_in?: string[] | null
  content_lt?: string | null
  content_lte?: string | null
  content_not?: string | null
  content_not_contains?: string | null
  content_not_ends_with?: string | null
  content_not_in?: string[] | null
  content_not_starts_with?: string | null
  content_starts_with?: string | null
  createdAt?: DateTime | null
  createdAt_gt?: DateTime | null
  createdAt_gte?: DateTime | null
  createdAt_in?: Array<DateTime> | null
  createdAt_lt?: DateTime | null
  createdAt_lte?: DateTime | null
  createdAt_not?: DateTime | null
  createdAt_not_in?: Array<DateTime> | null
  id?: ID | null
  id_contains?: ID | null
  id_ends_with?: ID | null
  id_gt?: ID | null
  id_gte?: ID | null
  id_in?: Array<ID> | null
  id_lt?: ID | null
  id_lte?: ID | null
  id_not?: ID | null
  id_not_contains?: ID | null
  id_not_ends_with?: ID | null
  id_not_in?: Array<ID> | null
  id_not_starts_with?: ID | null
  id_starts_with?: ID | null
  NOT?: Array<IGraphQLPostWhereInput> | null
  OR?: Array<IGraphQLPostWhereInput> | null
  published?: boolean | null
  published_not?: boolean | null
  title?: string | null
  title_contains?: string | null
  title_ends_with?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_in?: string[] | null
  title_lt?: string | null
  title_lte?: string | null
  title_not?: string | null
  title_not_contains?: string | null
  title_not_ends_with?: string | null
  title_not_in?: string[] | null
  title_not_starts_with?: string | null
  title_starts_with?: string | null
  updatedAt?: DateTime | null
  updatedAt_gt?: DateTime | null
  updatedAt_gte?: DateTime | null
  updatedAt_in?: Array<DateTime> | null
  updatedAt_lt?: DateTime | null
  updatedAt_lte?: DateTime | null
  updatedAt_not?: DateTime | null
  updatedAt_not_in?: Array<DateTime> | null
}

export interface IGraphQLPostWhereUniqueInput {
  id?: ID | null
}

export interface IGraphQLUserCreateInput {
  email: string
  name?: string | null
  posts?: IGraphQLPostCreateManyWithoutAuthorInput | null
}

export interface IGraphQLUserCreateOneWithoutPostsInput {
  connect?: IGraphQLUserWhereUniqueInput | null
  create?: IGraphQLUserCreateWithoutPostsInput | null
}

export interface IGraphQLUserCreateWithoutPostsInput {
  email: string
  name?: string | null
}

export interface IGraphQLUserUpdateInput {
  email?: string | null
  name?: string | null
  posts?: IGraphQLPostUpdateManyWithoutAuthorInput | null
}

export interface IGraphQLUserUpdateManyMutationInput {
  email?: string | null
  name?: string | null
}

export interface IGraphQLUserUpdateOneRequiredWithoutPostsInput {
  connect?: IGraphQLUserWhereUniqueInput | null
  create?: IGraphQLUserCreateWithoutPostsInput | null
  update?: IGraphQLUserUpdateWithoutPostsDataInput | null
  upsert?: IGraphQLUserUpsertWithoutPostsInput | null
}

export interface IGraphQLUserUpdateWithoutPostsDataInput {
  email?: string | null
  name?: string | null
}

export interface IGraphQLUserUpsertWithoutPostsInput {
  create: IGraphQLUserCreateWithoutPostsInput
  update: IGraphQLUserUpdateWithoutPostsDataInput
}

export interface IGraphQLUserWhereInput {
  AND?: Array<IGraphQLUserWhereInput> | null
  email?: string | null
  email_contains?: string | null
  email_ends_with?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_in?: string[] | null
  email_lt?: string | null
  email_lte?: string | null
  email_not?: string | null
  email_not_contains?: string | null
  email_not_ends_with?: string | null
  email_not_in?: string[] | null
  email_not_starts_with?: string | null
  email_starts_with?: string | null
  id?: ID | null
  id_contains?: ID | null
  id_ends_with?: ID | null
  id_gt?: ID | null
  id_gte?: ID | null
  id_in?: Array<ID> | null
  id_lt?: ID | null
  id_lte?: ID | null
  id_not?: ID | null
  id_not_contains?: ID | null
  id_not_ends_with?: ID | null
  id_not_in?: Array<ID> | null
  id_not_starts_with?: ID | null
  id_starts_with?: ID | null
  name?: string | null
  name_contains?: string | null
  name_ends_with?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_in?: string[] | null
  name_lt?: string | null
  name_lte?: string | null
  name_not?: string | null
  name_not_contains?: string | null
  name_not_ends_with?: string | null
  name_not_in?: string[] | null
  name_not_starts_with?: string | null
  name_starts_with?: string | null
  NOT?: Array<IGraphQLUserWhereInput> | null
  OR?: Array<IGraphQLUserWhereInput> | null
  posts_every?: IGraphQLPostWhereInput | null
  posts_none?: IGraphQLPostWhereInput | null
  posts_some?: IGraphQLPostWhereInput | null
}

export interface IGraphQLUserWhereUniqueInput {
  email?: string | null
  id?: ID | null
}

/*
 *
 * SCALAR TYPES
 *
 */

export type DateTime = string

export type Long = any

/*
 *
 * ENUM TYPES
 *
 */

export interface PostOrderByInput {
  content_ASC: 'content_ASC'
  content_DESC: 'content_DESC'
  createdAt_ASC: 'createdAt_ASC'
  createdAt_DESC: 'createdAt_DESC'
  id_ASC: 'id_ASC'
  id_DESC: 'id_DESC'
  published_ASC: 'published_ASC'
  published_DESC: 'published_DESC'
  title_ASC: 'title_ASC'
  title_DESC: 'title_DESC'
  updatedAt_ASC: 'updatedAt_ASC'
  updatedAt_DESC: 'updatedAt_DESC'
}

export const PostOrderByInput: PostOrderByInput = {
  content_ASC: 'content_ASC',
  content_DESC: 'content_DESC',
  createdAt_ASC: 'createdAt_ASC',
  createdAt_DESC: 'createdAt_DESC',
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  published_ASC: 'published_ASC',
  published_DESC: 'published_DESC',
  title_ASC: 'title_ASC',
  title_DESC: 'title_DESC',
  updatedAt_ASC: 'updatedAt_ASC',
  updatedAt_DESC: 'updatedAt_DESC',
}

export interface UserOrderByInput {
  createdAt_ASC: 'createdAt_ASC'
  createdAt_DESC: 'createdAt_DESC'
  email_ASC: 'email_ASC'
  email_DESC: 'email_DESC'
  id_ASC: 'id_ASC'
  id_DESC: 'id_DESC'
  name_ASC: 'name_ASC'
  name_DESC: 'name_DESC'
  updatedAt_ASC: 'updatedAt_ASC'
  updatedAt_DESC: 'updatedAt_DESC'
}

export const UserOrderByInput: UserOrderByInput = {
  createdAt_ASC: 'createdAt_ASC',
  createdAt_DESC: 'createdAt_DESC',
  email_ASC: 'email_ASC',
  email_DESC: 'email_DESC',
  id_ASC: 'id_ASC',
  id_DESC: 'id_DESC',
  name_ASC: 'name_ASC',
  name_DESC: 'name_DESC',
  updatedAt_ASC: 'updatedAt_ASC',
  updatedAt_DESC: 'updatedAt_DESC',
}

"
`;
