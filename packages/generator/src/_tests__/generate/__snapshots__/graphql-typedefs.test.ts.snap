// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate graphql > typedefs match snapshot 1`] = `
"/*
 *
 * RUNTIME TYPEDEFS
 *
 */





import gql from 'graphql-tag' 

export const TYPEDEFS = gql\`
  type Query {
    board(where: BoardWhereUniqueInput!): Board
    boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board]!
    boardsConnection(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoardConnection!
    post(where: PostWhereUniqueInput!): Post
    posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
    postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
    thread(where: ThreadWhereUniqueInput!): Thread
    threads(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thread]!
    threadsConnection(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThreadConnection!
    user(where: UserWhereUniqueInput!): User
    users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
    usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
    node(id: ID!): Node
  }
  
  type Board {
    id: ID!
    createdAt: DateTime!
    admins(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
    members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
    threads(where: ThreadWhereInput, orderBy: ThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thread!]
  }
  
  scalar DateTime
  
  type User {
    id: ID!
    nationality: String
    email: String!
    name: String
    posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  }
  
  type Post {
    id: ID!
    author: User!
    content: String
    createdAt: DateTime!
    published: Boolean!
    title: String!
    updatedAt: DateTime!
  }
  
  type Thread {
    id: ID!
    createdAt: DateTime!
    author: User!
    name: String!
    entry: Post!
    replies(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  }
  
  type BoardConnection {
    pageInfo: PageInfo!
    edges: [BoardEdge]!
    aggregate: AggregateBoard!
  }
  
  type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
  }
  
  type BoardEdge {
    node: Board!
    cursor: String!
  }
  
  type AggregateBoard {
    count: Int!
  }
  
  type PostConnection {
    pageInfo: PageInfo!
    edges: [PostEdge]!
    aggregate: AggregatePost!
  }
  
  type PostEdge {
    node: Post!
    cursor: String!
  }
  
  type AggregatePost {
    count: Int!
  }
  
  type ThreadConnection {
    pageInfo: PageInfo!
    edges: [ThreadEdge]!
    aggregate: AggregateThread!
  }
  
  type ThreadEdge {
    node: Thread!
    cursor: String!
  }
  
  type AggregateThread {
    count: Int!
  }
  
  type UserConnection {
    pageInfo: PageInfo!
    edges: [UserEdge]!
    aggregate: AggregateUser!
  }
  
  type UserEdge {
    node: User!
    cursor: String!
  }
  
  type AggregateUser {
    count: Int!
  }
  
  interface Node {
    id: ID!
  }
  
  type Mutation {
    createBoard(data: BoardCreateInput!): Board!
    updateBoard(data: BoardUpdateInput!, where: BoardWhereUniqueInput!): Board
    upsertBoard(where: BoardWhereUniqueInput!, create: BoardCreateInput!, update: BoardUpdateInput!): Board!
    deleteBoard(where: BoardWhereUniqueInput!): Board
    deleteManyBoards(where: BoardWhereInput): BatchPayload!
    createPost(data: PostCreateInput!): Post!
    updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
    updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
    upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
    deletePost(where: PostWhereUniqueInput!): Post
    deleteManyPosts(where: PostWhereInput): BatchPayload!
    createThread(data: ThreadCreateInput!): Thread!
    updateThread(data: ThreadUpdateInput!, where: ThreadWhereUniqueInput!): Thread
    updateManyThreads(data: ThreadUpdateManyMutationInput!, where: ThreadWhereInput): BatchPayload!
    upsertThread(where: ThreadWhereUniqueInput!, create: ThreadCreateInput!, update: ThreadUpdateInput!): Thread!
    deleteThread(where: ThreadWhereUniqueInput!): Thread
    deleteManyThreads(where: ThreadWhereInput): BatchPayload!
    createUser(data: UserCreateInput!): User!
    updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
    updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
    upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
    deleteUser(where: UserWhereUniqueInput!): User
    deleteManyUsers(where: UserWhereInput): BatchPayload!
  }
  
  type BatchPayload {
    count: Long!
  }
  
  scalar Long
  
  type Subscription {
    board(where: BoardSubscriptionWhereInput): BoardSubscriptionPayload
    post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
    thread(where: ThreadSubscriptionWhereInput): ThreadSubscriptionPayload
    user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  }
  
  type BoardSubscriptionPayload {
    mutation: MutationType!
    node: Board
    updatedFields: [String!]
    previousValues: BoardPreviousValues
  }
  
  enum MutationType {
    CREATED
    UPDATED
    DELETED
  }
  
  type BoardPreviousValues {
    id: ID!
    createdAt: DateTime!
  }
  
  type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
    updatedFields: [String!]
    previousValues: PostPreviousValues
  }
  
  type PostPreviousValues {
    id: ID!
    content: String
    createdAt: DateTime!
    published: Boolean!
    title: String!
    updatedAt: DateTime!
  }
  
  type ThreadSubscriptionPayload {
    mutation: MutationType!
    node: Thread
    updatedFields: [String!]
    previousValues: ThreadPreviousValues
  }
  
  type ThreadPreviousValues {
    id: ID!
    createdAt: DateTime!
    name: String!
  }
  
  type UserSubscriptionPayload {
    mutation: MutationType!
    node: User
    updatedFields: [String!]
    previousValues: UserPreviousValues
  }
  
  type UserPreviousValues {
    id: ID!
    nationality: String
    email: String!
    name: String
  }
\`

export default TYPEDEFS"
`;
