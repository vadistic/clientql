/*
 *
 * Code generated by Graphql Client Generator.
 * DO NOT EDIT.
 * Please don't change this file manually but run 'something' to update it.
 * For more information, please read the docs: https://doclink.com/
 *
 */

import { Stake } from './types'

import {
  EventResponse,
  ConcertResponse,
  VenueResponse,
  PerformerResponse,
  PersonResponse,
  ClientResponse,
  FestivalResponse,
  StakeholderResponse,
  SpeakerResponse,
  ConferenceResponse
} from './responses'

/*
 *
 * Root Client Interfaces
 *
 */

export interface MyQueryClient {
  findEventsAtVenue: (args?: { venueId: string }) => Promise<Array<EventResponse | null> | null> & EventClient
  findPerson: (args?: { id: string }) => Promise<PersonResponse | null> & PersonClient
}

export interface MyMutationClient {
  deleteEvent: (args?: { eventId: string }) => Promise<Array<EventResponse | null> | null> & EventClient
}

/*
 *
 * Client Interfaces
 *
 */

export interface EventClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  startsAt: () => Promise<string | null>
  endsAt: () => Promise<string | null>
  venue: () => Promise<VenueResponse | null> & VenueClient
  minAgeRestriction: () => Promise<number | null>
  Concert: {
    id: () => Promise<string>
    name: () => Promise<string>
    startsAt: () => Promise<string | null>
    endsAt: () => Promise<string | null>
    venue: () => Promise<VenueResponse | null> & VenueClient
    previousVenues: () => Promise<VenueResponse[] | null> & VenueClient
    minAgeRestriction: () => Promise<number | null>
    performingBand: () => Promise<PerformerResponse | null> & PerformerClient
  }
  Festival: {
    id: () => Promise<string>
    name: () => Promise<string>
    startsAt: () => Promise<string | null>
    endsAt: () => Promise<string | null>
    venue: () => Promise<VenueResponse | null> & VenueClient
    minAgeRestriction: () => Promise<number | null>
    performers: () => Promise<Array<PerformerResponse | null> | null> & PerformerClient
  }
  Conference: {
    id: () => Promise<string>
    name: () => Promise<string>
    startsAt: () => Promise<string | null>
    endsAt: () => Promise<string | null>
    venue: () => Promise<VenueResponse | null> & VenueClient
    minAgeRestriction: () => Promise<number | null>
    speakers: () => Promise<Array<SpeakerResponse | null> | null> & SpeakerClient
    workshops: () => Promise<Array<string | null> | null>
  }
}

export interface ConcertClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  startsAt: () => Promise<string | null>
  endsAt: () => Promise<string | null>
  venue: () => Promise<VenueResponse | null> & VenueClient
  previousVenues: () => Promise<VenueResponse[] | null> & VenueClient
  minAgeRestriction: () => Promise<number | null>
  performingBand: () => Promise<PerformerResponse | null> & PerformerClient
}

export interface VenueClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  address: () => Promise<string | null>
  maxOccupancy: () => Promise<number | null>
}

export interface PerformerClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  contact: () => Promise<string | null>
  speciality: () => Promise<string | null>
  fee: () => Promise<number | null>
}

export interface PersonClient extends Fragmentable {
  Client: {
    id: () => Promise<string>
    name: () => Promise<string>
    events: () => Promise<Array<EventResponse | null> | null> & EventClient
  }
  Stakeholder: {
    id: () => Promise<string>
    name: () => Promise<string>
    company: () => Promise<string | null>
    stake: () => Promise<Stake | null>
  }
  Speaker: {
    id: () => Promise<string>
    name: () => Promise<string>
    contact: () => Promise<string | null>
  }
  Performer: {
    id: () => Promise<string>
    name: () => Promise<string>
    contact: () => Promise<string | null>
    speciality: () => Promise<string | null>
    fee: () => Promise<number | null>
  }
}

export interface ClientClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  events: () => Promise<Array<EventResponse | null> | null> & EventClient
}

export interface FestivalClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  startsAt: () => Promise<string | null>
  endsAt: () => Promise<string | null>
  venue: () => Promise<VenueResponse | null> & VenueClient
  minAgeRestriction: () => Promise<number | null>
  performers: () => Promise<Array<PerformerResponse | null> | null> & PerformerClient
}

export interface StakeholderClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  company: () => Promise<string | null>
  stake: () => Promise<Stake | null>
}

export interface SpeakerClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  contact: () => Promise<string | null>
}

export interface ConferenceClient extends Fragmentable {
  id: () => Promise<string>
  name: () => Promise<string>
  startsAt: () => Promise<string | null>
  endsAt: () => Promise<string | null>
  venue: () => Promise<VenueResponse | null> & VenueClient
  minAgeRestriction: () => Promise<number | null>
  speakers: () => Promise<Array<SpeakerResponse | null> | null> & SpeakerClient
  workshops: () => Promise<Array<string | null> | null>
}

